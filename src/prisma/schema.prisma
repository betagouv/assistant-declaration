generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["fullTextSearchPostgres", "views"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum VerificationTokenAction {
  SIGN_UP
  RESET_PASSWORD
}

model VerificationToken {
  token      String                  @id
  action     VerificationTokenAction
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([token])
}

model Address {
  id          String @id @default(uuid()) @db.Uuid
  street      String
  city        String
  postalCode  String
  countryCode String
  subdivision String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Organization Organization?
  Place        Place?
}

enum UserStatus {
  REGISTERED
  CONFIRMED
  DISABLED
}

model UserSecrets {
  id           String @id @default(uuid()) @db.Uuid
  userId       String @unique @db.Uuid
  passwordHash String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(uuid()) @db.Uuid
  firstname      String
  lastname       String
  email          String     @unique
  status         UserStatus @default(REGISTERED)
  profilePicture String?
  lastActivityAt DateTime?  @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Secrets          UserSecrets?
  Account          Account?
  LiveChatSettings LiveChatSettings?
  Session          Session[]
  Collaborator     Collaborator[]
  Admin            Admin?
}

model Admin {
  id            String  @id @default(uuid()) @db.Uuid
  userId        String  @unique @db.Uuid
  canEverything Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LiveChatSettings {
  userId       String @id @db.Uuid
  sessionToken String @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Organization {
  id                     String  @id @default(uuid()) @db.Uuid
  name                   String
  officialId             String  @unique
  officialHeadquartersId String  @unique
  headquartersAddressId  String  @unique @db.Uuid
  sacemId                String? @unique
  sacdId                 String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  headquartersAddress Address           @relation(fields: [headquartersAddressId], references: [id], onDelete: Cascade)
  TicketingSystem     TicketingSystem[]
  Collaborator        Collaborator[]
}

enum TicketingSystemName {
  BILLETWEB
  HELLOASSO
  MAPADO
  SHOTGUN
  SOTICKET
  SUPERSONIKS
}

model TicketingSystem {
  id                           String              @id @default(uuid()) @db.Uuid
  organizationId               String              @db.Uuid
  name                         TicketingSystemName
  apiAccessKey                 String?
  apiSecretKey                 String?
  lastSynchronizationAt        DateTime?
  forceNextSynchronizationFrom DateTime?
  lastProcessingError          String?
  lastProcessingErrorAt        DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  EventSerie   EventSerie[]
}

model Collaborator {
  id             String @id @default(uuid()) @db.Uuid
  userId         String @db.Uuid
  organizationId String @db.Uuid

  // rights?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Place {
  id        String @id @default(uuid()) @db.Uuid
  name      String
  addressId String @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  address    Address      @relation(fields: [addressId], references: [id])
  EventSerie EventSerie[]
  Event      Event[]
}

enum Audience {
  ALL
  YOUNG
  SCHOOL
}

enum PerformanceType {
  OUTDOOR_PERFORMANCE
  CABARET_AND_MUSIC_HALL
  CIRCUS_AND_MAGIC
  MUSICAL_THEATRE
  DANCE
  COMEDY_AND_STAND_UP
  PUPPETRY
  CLASSICAL_AND_OPERA_AND_CONTEMPORARY_MUSIC
  POPULAR_AND_JAZZ_MUSIC
  WORLD_AND_TRADITIONAL_MUSIC_AND_DANCE
  HISTORICAL_REENACTMENTS_AND_HERITAGE_SOUND_AND_LIGHT_SHOWS
  LIVE_PERFORMANCE_WITHOUT_DOMINANT_DISCIPLINE
  ICE_SHOWS_AND_THEME_PARKS_AND_RELATED_PERFORMANCES
  THEATRE_AND_STORYTELLING_AND_MIME
}

enum DeclarationType {
  SACEM
  SACD
}

model EventSerie {
  id                        String            @id @default(uuid()) @db.Uuid
  internalTicketingSystemId String
  ticketingSystemId         String            @db.Uuid
  name                      String
  producerOfficialId        String?
  producerName              String?
  performanceType           PerformanceType?
  expectedDeclarationTypes  DeclarationType[]
  // image Attachment
  lastManualUpdateAt        DateTime?

  // Properties specific to when it's performed
  placeId                                String?  @db.Uuid
  placeCapacity                          Int?
  audience                               Audience @default(ALL)
  ticketingRevenueTaxRate                Decimal  @default(0) @db.Decimal(5, 4) // [WARNING] We store floats like 0.2, not 20 for 20%
  expensesIncludingTaxes                 Decimal  @db.Decimal(10, 2)
  expensesExcludingTaxes                 Decimal  @db.Decimal(10, 2)
  expensesTaxRate                        Decimal? @db.Decimal(10, 2) // Optional if both amounts directly set
  introductionFeesExpensesIncludingTaxes Decimal  @db.Decimal(10, 2)
  introductionFeesExpensesExcludingTaxes Decimal  @db.Decimal(10, 2)
  introductionFeesExpensesTaxRate        Decimal? @db.Decimal(10, 2) // Optional if both amounts directly set
  circusSpecificExpensesIncludingTaxes   Decimal? @db.Decimal(10, 2)
  circusSpecificExpensesExcludingTaxes   Decimal? @db.Decimal(10, 2)
  circusSpecificExpensesTaxRate          Decimal? @db.Decimal(10, 2) // Optional if both amounts directly set

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  place                 Place?                  @relation(fields: [placeId], references: [id])
  ticketingSystem       TicketingSystem         @relation(fields: [ticketingSystemId], references: [id], onDelete: Cascade)
  Event                 Event[]
  EventSerieDeclaration EventSerieDeclaration[]

  @@unique([ticketingSystemId, internalTicketingSystemId])
}

model Event {
  id                                String    @id @default(uuid()) @db.Uuid
  internalTicketingSystemId         String
  eventSerieId                      String    @db.Uuid
  startAt                           DateTime
  endAt                             DateTime?
  ticketingRevenueIncludingTaxes    Decimal   @db.Decimal(10, 2)
  ticketingRevenueExcludingTaxes    Decimal   @db.Decimal(10, 2)
  ticketingRevenueDefinedTaxRate    Boolean // In case there is no legal rate to bind both amounts
  consumptionsRevenueIncludingTaxes Decimal   @db.Decimal(10, 2)
  consumptionsRevenueExcludingTaxes Decimal   @db.Decimal(10, 2)
  consumptionsRevenueTaxRate        Decimal?  @db.Decimal(10, 2) // Optional if both amounts directly set
  cateringRevenueIncludingTaxes     Decimal   @db.Decimal(10, 2)
  cateringRevenueExcludingTaxes     Decimal   @db.Decimal(10, 2)
  cateringRevenueTaxRate            Decimal?  @db.Decimal(10, 2) // Optional if both amounts directly set
  programSalesRevenueIncludingTaxes Decimal   @db.Decimal(10, 2)
  programSalesRevenueExcludingTaxes Decimal   @db.Decimal(10, 2)
  programSalesRevenueTaxRate        Decimal?  @db.Decimal(10, 2) // Optional if both amounts directly set
  otherRevenueIncludingTaxes        Decimal   @db.Decimal(10, 2)
  otherRevenueExcludingTaxes        Decimal   @db.Decimal(10, 2)
  otherRevenueTaxRate               Decimal?  @db.Decimal(10, 2) // Optional if both amounts directly set
  freeTickets                       Int
  paidTickets                       Int
  lastManualTicketingDataUpdateAt   DateTime?

  // Each event has following properties but they are defined at
  // the event serie level, here it's to override in case of specifics
  placeOverrideId                 String?   @db.Uuid
  placeCapacityOverride           Int?
  audienceOverride                Audience?
  ticketingRevenueTaxRateOverride Decimal?  @db.Decimal(5, 4) // Optional if reusing the one from the event serie

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  eventSerie    EventSerie @relation(fields: [eventSerieId], references: [id], onDelete: Cascade)
  placeOverride Place?     @relation(fields: [placeOverrideId], references: [id])

  @@unique([eventSerieId, internalTicketingSystemId])
}

enum EventSerieDeclarationStatus {
  PENDING
  PROCESSED
  CANCELED
}

model EventSerieDeclaration {
  id                      String                      @id @default(uuid()) @db.Uuid
  eventSerieId            String                      @db.Uuid
  type                    DeclarationType
  status                  EventSerieDeclarationStatus @default(PENDING)
  transmittedAt           DateTime?
  lastTransmissionError   String?
  lastTransmissionErrorAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  eventSerie EventSerie @relation(fields: [eventSerieId], references: [id], onDelete: Cascade)

  @@unique([eventSerieId, type])
}

model SacemAgency {
  id                        String   @id @default(uuid()) @db.Uuid
  email                     String   @unique
  matchingFrenchPostalCodes String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
