// This file is auto-generated by @hey-api/openapi-ts

export type HaTrustContractLegalInformationAddressAddressDto = {
    line?: string | null;
    city?: string | null;
    zipCode?: string | null;
    country?: number | null;
    countryName?: string | null;
    countryAlpha3?: string | null;
};

/**
 * user/payer company legal status
 */
export type HelloAssoApiV5ModelsAccountCompanyLegalStatusModel = {
    /**
     * Company legal status id
     */
    id?: number;
    /**
     * Company legal status label
     */
    label?: string | null;
};

export type HelloAssoApiV5ModelsAccountOrganismCategoryModel = {
    id?: number;
    label?: string | null;
    shortLabel?: string | null;
};

export type HelloAssoApiV5ModelsAccountsClientsApiClientModel = {
    id?: string | null;
    /**
     * Filled only when requested by the organization back office
     */
    secret?: string | null;
    partnerName?: string | null;
    privileges?: Array<string> | null;
    domain?: string | null;
};

export type HelloAssoApiV5ModelsAccountsClientsPublicPutApiClientRequest = {
    /**
     * Client domain : Url used to grant authorization redirection
     */
    domain?: string | null;
};

export type HelloAssoApiV5ModelsApiNotificationsApiNotificationType = 'Payment' | 'Order' | 'Form' | 'Organization';

/**
 * Organization notification URL Model class
 */
export type HelloAssoApiV5ModelsApiNotificationsApiUrlNotificationModel = {
    /**
     * The notification Url
     */
    url?: string | null;
    apiNotificationType?: HelloAssoApiV5ModelsApiNotificationsApiNotificationType;
    /**
     * Signature Key : allows you to verify the authenticity of notifications
     */
    signatureKey?: string | null;
};

export type HelloAssoApiV5ModelsApiNotificationsPostApiUrlNotificationBody = {
    /**
     * The Api notification Url
     */
    url: string;
    notificationType?: HelloAssoApiV5ModelsApiNotificationsApiNotificationType;
};

export type HelloAssoApiV5ModelsCartsCheckoutIntentResponse = {
    /**
     * Metadata (Json object)
     * Only if metadata were sent on the checkout form initialization
     */
    metadata?: unknown;
    order?: HelloAssoApiV5ModelsStatisticsOrderDetail;
    /**
     * Id of the checkout intent
     */
    id?: number;
    /**
     * Url where the contributor must be redirected to
     */
    redirectUrl?: string | null;
};

export type HelloAssoApiV5ModelsCartsCheckoutPayer = {
    /**
     * FirstName
     */
    firstName?: string | null;
    /**
     * LastName
     */
    lastName?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Date of birth (Date only, no time part)
     */
    dateOfBirth?: string | null;
    /**
     * Address
     */
    address?: string | null;
    /**
     * City
     */
    city?: string | null;
    /**
     * ZipCode
     */
    zipCode?: string | null;
    /**
     * 3 letter country code
     */
    country?: string | null;
    /**
     * Used if the payer is a company
     */
    companyName?: string | null;
};

export type HelloAssoApiV5ModelsCartsCheckoutTerm = {
    /**
     * Term amount, all taxes included, in cents
     */
    amount: number;
    /**
     * Term date
     */
    date: string;
};

export type HelloAssoApiV5ModelsCartsInitCheckoutBody = {
    /**
     * Total amount, all taxes included, in cents (required)
     * Must be equal to the sum of the initial amount and subsequent terms
     */
    totalAmount: number;
    /**
     * The amount for the first term, all taxes included, in cents (required)
     */
    initialAmount: number;
    /**
     * Item name (required)
     * A text describing what the user paid for ('Renew license', '3 tickets', donation, etc).
     * Will be displayed in the near future in the user space and in the organization back office
     */
    itemName: string;
    /**
     * Url followed by the contributor if he wants to return to its previous site
     */
    backUrl: string;
    /**
     * Url called in case of an error during the checkout process
     */
    errorUrl: string;
    /**
     * Url called after the payment
     */
    returnUrl: string;
    /**
     * The sale (or a part of) is a donation
     */
    containsDonation: boolean;
    /**
     * The list of future terms (if applicable)
     */
    terms?: Array<HelloAssoApiV5ModelsCartsCheckoutTerm> | null;
    payer?: HelloAssoApiV5ModelsCartsCheckoutPayer;
    /**
     * Metadata (optional)
     * Json object (max length : 20000)
     */
    metadata?: unknown;
};

export type HelloAssoApiV5ModelsCartsInitCheckoutResponse = {
    /**
     * Id of the checkout intent
     */
    id?: number;
    /**
     * Url where the contributor must be redirected to
     */
    redirectUrl?: string | null;
};

/**
 * Contact class
 */
export type HelloAssoApiV5ModelsCommonContactModel = {
    /**
     * Contact email
     */
    email?: string | null;
    /**
     * Contact phone number
     */
    phoneNumber?: string | null;
};

/**
 * DocumentModel class
 */
export type HelloAssoApiV5ModelsCommonDocumentModel = {
    id?: number | null;
    /**
     * The file name of document
     */
    fileName?: string | null;
    /**
     * The public url of document
     */
    publicUrl?: string | null;
};

/**
 * MetaModel class
 */
export type HelloAssoApiV5ModelsCommonMetaModel = {
    /**
     * CreatedAt
     */
    createdAt?: string;
    /**
     * UpdateAt
     */
    updatedAt?: string;
};

/**
 * Pagination model class
 */
export type HelloAssoApiV5ModelsCommonPaginationModel = {
    /**
     * Page size
     */
    pageSize: number;
    /**
     * Total number of results available
     */
    totalCount: number;
    /**
     * Current page index
     */
    pageIndex: number;
    /**
     * Total number of pages of results with current page size
     */
    totalPages: number;
    /**
     * Continuation Token to get next results
     */
    continuationToken: string | null;
};

/**
 * PlaceModel class
 */
export type HelloAssoApiV5ModelsCommonPlaceModel = {
    /**
     * Address
     */
    address?: string | null;
    /**
     * Name of the place
     */
    name?: string | null;
    /**
     * City
     */
    city?: string | null;
    /**
     * ZipCode
     */
    zipCode?: string | null;
    /**
     * 3 letter country code
     */
    country?: string | null;
    geoLocation?: HelloAssoModelsSharedGeoLocation;
};

/**
 * ResultsWithPaginationModel<PartnerOrganizationModel>
 * ResultsWithPaginationModel class
 */
export type ResultsWithPaginationModelPartnerOrganizationModel = {
    /**
     * Data property
     */
    data?: Array<HelloAssoApiV5ModelsDirectoryPartnerOrganizationModel> | null;
    pagination?: HelloAssoApiV5ModelsCommonPaginationModel;
};

/**
 * ResultsWithPaginationModel<SynchronizableFormModel>
 * ResultsWithPaginationModel class
 */
export type ResultsWithPaginationModelSynchronizableFormModel = {
    /**
     * Data property
     */
    data?: Array<HelloAssoApiV5ModelsDirectorySynchronizableFormModel> | null;
    pagination?: HelloAssoApiV5ModelsCommonPaginationModel;
};

/**
 * ResultsWithPaginationModel<SynchronizableOrganizationModel>
 * ResultsWithPaginationModel class
 */
export type ResultsWithPaginationModelSynchronizableOrganizationModel = {
    /**
     * Data property
     */
    data?: Array<HelloAssoApiV5ModelsDirectorySynchronizableOrganizationModel> | null;
    pagination?: HelloAssoApiV5ModelsCommonPaginationModel;
};

/**
 * ResultsWithPaginationModel<FormLightModel>
 * ResultsWithPaginationModel class
 */
export type ResultsWithPaginationModelFormLightModel = {
    /**
     * Data property
     */
    data?: Array<HelloAssoApiV5ModelsFormsFormLightModel> | null;
    pagination?: HelloAssoApiV5ModelsCommonPaginationModel;
};

/**
 * ResultsWithPaginationModel<PublicPaymentModel>
 * ResultsWithPaginationModel class
 */
export type ResultsWithPaginationModelPublicPaymentModel = {
    /**
     * Data property
     */
    data?: Array<HelloAssoApiV5ModelsPaymentPublicPaymentModel> | null;
    pagination?: HelloAssoApiV5ModelsCommonPaginationModel;
};

/**
 * ResultsWithPaginationModel<Item>
 * ResultsWithPaginationModel class
 */
export type ResultsWithPaginationModelItem = {
    /**
     * Data property
     */
    data?: Array<HelloAssoApiV5ModelsStatisticsItem> | null;
    pagination?: HelloAssoApiV5ModelsCommonPaginationModel;
};

/**
 * ResultsWithPaginationModel<Order>
 * ResultsWithPaginationModel class
 */
export type ResultsWithPaginationModelOrder = {
    /**
     * Data property
     */
    data: Array<HelloAssoApiV5ModelsStatisticsOrder> | null;
    pagination: HelloAssoApiV5ModelsCommonPaginationModel;
};

/**
 * ResultsWithPaginationModel<Payment>
 * ResultsWithPaginationModel class
 */
export type ResultsWithPaginationModelPayment = {
    /**
     * Data property
     */
    data?: Array<HelloAssoApiV5ModelsStatisticsPayment> | null;
    pagination?: HelloAssoApiV5ModelsCommonPaginationModel;
};

/**
 * DirectoryOrganizationPublicModel class
 */
export type HelloAssoApiV5ModelsDirectoryDirectoryOrganizationPublicModel = {
    /**
     * The public tags of the organization
     */
    tags?: Array<string> | null;
    /**
     * Partners linked to this organization
     */
    linkedPartners?: Array<string> | null;
    /**
     * The organization is authenticated. Property returned only when asked by an organization admin.
     */
    isAuthenticated?: boolean | null;
    /**
     * If transaction can be init on the organization or not.
     */
    isCashInCompliant?: boolean | null;
    /**
     * The organization banner
     */
    banner?: string | null;
    /**
     * The organism can issue fiscal receipts (type ok and has not deactivated it)
     * Must configure it and be authenticated to become enabled
     */
    fiscalReceiptEligibility?: boolean;
    /**
     * The organism is eligible, has set up his options, and is authenticated.
     */
    fiscalReceiptIssuanceEnabled?: boolean;
    type?: HelloAssoApiV5ModelsEnumsOrganizationType;
    /**
     * Organization category label
     */
    category?: string | null;
    /**
     * Organization Address (for authorized applications or if authorized by the organization)
     */
    address?: string | null;
    geolocation?: HelloAssoModelsSharedGeoLocation;
    /**
     * Unique identifier assigned when creating the association
     */
    rnaNumber?: string | null;
    /**
     * Logo of organization
     */
    logo?: string | null;
    /**
     * Name of organization
     */
    name?: string | null;
    role?: HelloAssoModelsEnumsGlobalRole;
    /**
     * Organization city
     */
    city?: string | null;
    /**
     * Organization zip code
     */
    zipCode?: string | null;
    /**
     * Organization description
     */
    description?: string | null;
    /**
     * Last update date of the organization
     */
    updateDate?: string;
    categoryJoId?: number | null;
    /**
     * The organization url
     */
    url?: string | null;
    /**
     * The organization slug
     */
    organizationSlug?: string | null;
};

export type HelloAssoApiV5ModelsDirectoryListFormsRequest = {
    /**
     * Textual search for form name
     */
    formName?: string | null;
    /**
     * Textual search for form description
     */
    formDescription?: string | null;
    /**
     * The zip codes where the forms are located
     */
    formZipCodes?: Array<string> | null;
    /**
     * The cities where the forms are located
     */
    formCities?: Array<string> | null;
    /**
     * The regions where the forms are located
     */
    formRegions?: Array<string> | null;
    /**
     * The departments where the forms are located
     */
    formDepartments?: Array<string> | null;
    /**
     * The countries where the forms are located
     */
    formCountries?: Array<string> | null;
    /**
     * The form types : CrowdFunding, Membership, Event, Donation, PaymentForm ...
     */
    formTypes?: Array<HelloAssoApiV5ModelsEnumsFormType> | null;
    /**
     * The Activity Type of the form
     */
    formActivityType?: Array<string> | null;
    /**
     * The inclusive minimum publication date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
     */
    formPublicationStartDateMin?: string | null;
    /**
     * The exclusive maximum publication date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
     */
    formPublicationStartDateMax?: string | null;
    /**
     * The inclusive minimum start date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
     */
    formStartDateMin?: string | null;
    /**
     * The exclusive maximum start date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
     */
    formStartDateMax?: string | null;
    /**
     * The exclusive maximum end date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
     */
    formEndDateMax?: string | null;
    /**
     * The inclusive minimum end date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
     */
    formEndDateMin?: string | null;
    /**
     * Allow only free forms if true
     */
    formIsFree?: boolean | null;
    /**
     * Allow only forms with remaning entries if true
     */
    formHasRemainingEntries?: boolean | null;
    /**
     * Allow only forms with internal tags
     * this filter is for special operations only
     */
    formInternalTags?: Array<string> | null;
    /**
     * Allow only forms with public tags
     */
    formPublicTags?: Array<string> | null;
    /**
     * Textual search for organization name
     */
    organizationName?: string | null;
    /**
     * Textual search for organization description
     */
    organizationDescription?: string | null;
    /**
     * The categories of the forms
     */
    organizationCategories?: Array<string> | null;
    /**
     * The organization types
     */
    organizationTypes?: Array<string> | null;
    /**
     * The zip codes where the organizations are located
     */
    organizationZipCodes?: Array<string> | null;
    /**
     * The cities where the organizations are located
     */
    organizationCities?: Array<string> | null;
    /**
     * The regions where the organizations are located
     */
    organizationRegions?: Array<string> | null;
    /**
     * The departments where the organizations are located
     */
    organizationDepartments?: Array<string> | null;
    /**
     * Allow only organization with a fiscal receipt eligibility
     */
    organizationFiscalReceiptEligibility?: boolean | null;
    /**
     * Organization linked partners
     */
    organizationLinkedPartners?: Array<string> | null;
};

export type HelloAssoApiV5ModelsDirectoryListOrganizationsRequest = {
    /**
     * Textual search for organization name
     */
    name?: string | null;
    /**
     * Textual search for organization description
     */
    description?: string | null;
    /**
     * The categories of the organizations
     */
    categories?: Array<string> | null;
    /**
     * The organization types
     */
    types?: Array<string> | null;
    /**
     * The zip codes where the organizations are located
     */
    zipCodes?: Array<string> | null;
    /**
     * The cities where the organizations are located
     */
    cities?: Array<string> | null;
    /**
     * The regions where the organizations are located
     */
    regions?: Array<string> | null;
    /**
     * The departments where the organizations are located
     */
    departments?: Array<string> | null;
    /**
     * Allow only organization with a fiscal receipt eligibility
     */
    fiscalReceiptEligibility?: boolean | null;
    /**
     * Allow only Organization with internal tags
     * this filter is for special operations only
     */
    internalTags?: Array<string> | null;
    /**
     * Allow only Organization with public tags
     */
    tags?: Array<string> | null;
    /**
     * Allow only Organization with linked partners
     */
    linkedPartners?: Array<string> | null;
};

/**
 * PartnerOrganizationModel class
 */
export type HelloAssoApiV5ModelsDirectoryPartnerOrganizationModel = {
    organization?: HelloAssoApiV5ModelsDirectoryDirectoryOrganizationPublicModel;
    /**
     * True if exist a valid organization access token obtained by authorize flow
     */
    availableAccessToken?: boolean;
};

/**
 * SynchronizableFormModel class
 */
export type HelloAssoApiV5ModelsDirectorySynchronizableFormModel = {
    action?: HelloAssoApiV5ModelsEnumsRecordActionType;
    record?: HelloAssoApiV5ModelsFormsFormBasicModel;
};

/**
 * SynchronizableOrganizationModel class
 */
export type HelloAssoApiV5ModelsDirectorySynchronizableOrganizationModel = {
    action?: HelloAssoApiV5ModelsEnumsRecordActionType;
    record?: HelloAssoApiV5ModelsOrganizationOrganizationBasicModel;
};

export type HelloAssoApiV5ModelsEnumsFieldType = 'Date' | 'TextInput' | 'FreeText' | 'ChoiceList' | 'File' | 'YesNo' | 'Phone' | 'Zipcode' | 'Number';

export type HelloAssoApiV5ModelsEnumsFormState = 'Public' | 'Private' | 'Draft' | 'Deleted' | 'Disabled';

export type HelloAssoApiV5ModelsEnumsFormType = 'CrowdFunding' | 'Membership' | 'Event' | 'Donation' | 'PaymentForm' | 'Checkout' | 'Shop';

export type HelloAssoApiV5ModelsEnumsItemState = 'Waiting' | 'Processed' | 'Registered' | 'Deleted' | 'Refunded' | 'Unknown' | 'Canceled' | 'Contested' | 'Unknow' | 'Refused' | 'Abandoned';

/**
 * Enum which represents the membership validity type
 */
export type HelloAssoApiV5ModelsEnumsMembershipValidityType = 'MovingYear' | 'Custom' | 'Illimited';

export type HelloAssoApiV5ModelsEnumsOperationState = 'Unknown' | 'Init' | 'Processing' | 'Processed' | 'Error' | 'InternalError' | 'Refused' | 'Aborted' | 'Canceled';

export type HelloAssoApiV5ModelsEnumsOrganizationType = 'Association1901Rig' | 'Association1901Rup' | 'Association1901' | 'FondationRup' | 'FondDotation' | 'FondationSousEgide' | 'FondationScientifique' | 'FondationPartenariale' | 'FondationUniversitaire' | 'FondationHospitaliere' | 'Association1905' | 'Association1905Rup' | 'Entreprise' | 'Cooperative' | 'Etablissement' | 'Association1908' | 'Association1908Rig' | 'Association1908Rup' | 'AssociationMilitaire' | 'AssociationProprietaire' | 'Collectivités' | 'ComiteEntreprise' | 'CSE' | 'FabriqueEglise' | 'FondsPerenite' | 'GIE' | 'GIP' | 'MenseCuriale' | 'SCIC' | 'SCOP' | 'Autres';

export type HelloAssoApiV5ModelsEnumsPaymentCashOutState = 'MoneyIn' | 'CantTransferReceiverFull' | 'Transfered' | 'Refunded' | 'Refunding' | 'WaitingForCashOutConfirmation' | 'CashedOut' | 'Unknown' | 'Contested' | 'TransferInProgress';

export type HelloAssoApiV5ModelsEnumsPaymentFrequencyType = 'Single' | 'Installment' | 'Monthly';

export type HelloAssoApiV5ModelsEnumsPaymentMeans = 'None' | 'Card' | 'Sepa' | 'Check' | 'Cash' | 'BankTransfer' | 'Other';

/**
 * The payment provider type.
 */
export type HelloAssoApiV5ModelsEnumsPaymentProviderType = 'Lemonway' | 'Stripe' | 'StripeV2' | 'HaPay';

export type HelloAssoApiV5ModelsEnumsPaymentState = 'Pending' | 'Authorized' | 'Refused' | 'Unknown' | 'Registered' | 'Error' | 'Refunded' | 'Refunding' | 'Waiting' | 'Canceled' | 'Contested' | 'WaitingBankValidation' | 'WaitingBankWithdraw' | 'Abandoned' | 'WaitingAuthentication' | 'AuthorizedPreprod' | 'Corrected' | 'Deleted' | 'Inconsistent' | 'NoDonation' | 'Init';

export type HelloAssoApiV5ModelsEnumsPaymentType = 'Offline' | 'Credit' | 'Debit';

export type HelloAssoApiV5ModelsEnumsPriceCategory = 'Fixed' | 'Pwyw' | 'Free';

export type HelloAssoApiV5ModelsEnumsRecordActionType = 'Insert' | 'Delete';

export type HelloAssoApiV5ModelsEnumsSortField = 'Date' | 'UpdateDate' | 'CreationDate';

export type HelloAssoApiV5ModelsEnumsSortOrder = 'Asc' | 'Desc';

export type HelloAssoApiV5ModelsEnumsTagType = 'Explore' | 'Internal';

export type HelloAssoApiV5ModelsEnumsTierType = 'Donation' | 'Payment' | 'Registration' | 'Membership' | 'MonthlyDonation' | 'MonthlyPayment' | 'OfflineDonation' | 'Contribution' | 'Bonus' | 'Product';

/**
 * A custom field can be assigned to a Tier or an ExtraOption
 * It is used to give extra information during the reservation of a tier
 */
export type HelloAssoApiV5ModelsFormsCustomFieldPublicModelReadable = {
    /**
     * Id of the customField
     */
    readonly id?: number;
    /**
     * The list of possible values if type is a CHOICE_LIST
     */
    readonly values?: Array<string> | null;
    /**
     * True if the custom field must be filled by the user before validating a cart
     */
    readonly isRequired?: boolean;
    type?: HelloAssoApiV5ModelsEnumsFieldType;
    /**
     * The label to be displayed to the user
     */
    readonly label?: string | null;
};

/**
 * A custom field can be assigned to a Tier or an ExtraOption
 * It is used to give extra information during the reservation of a tier
 */
export type HelloAssoApiV5ModelsFormsCustomFieldPublicModelWritable = {
    type?: HelloAssoApiV5ModelsEnumsFieldType;
};

/**
 * ExtraOptionFullModel
 */
export type HelloAssoApiV5ModelsFormsExtraOptionPublicModelReadable = {
    /**
     * List of custom fields to be filled by the user
     */
    customFields?: Array<HelloAssoApiV5ModelsFormsCustomFieldPublicModelReadable> | null;
    /**
     * Id
     */
    id?: number;
    /**
     * Price of the extraOption, can be free
     */
    price?: number;
    /**
     * Vat rate if applicable
     * Amount have to be 0.10 for 10%
     */
    vatRate?: number;
    /**
     * The name of the option
     */
    label?: string | null;
    /**
     * The description of the option
     */
    description?: string | null;
    /**
     * Additional option is required/mandatory
     */
    readonly isRequired?: boolean;
};

/**
 * ExtraOptionFullModel
 */
export type HelloAssoApiV5ModelsFormsExtraOptionPublicModelWritable = {
    /**
     * List of custom fields to be filled by the user
     */
    customFields?: Array<HelloAssoApiV5ModelsFormsCustomFieldPublicModelWritable> | null;
    /**
     * Id
     */
    id?: number;
    /**
     * Price of the extraOption, can be free
     */
    price?: number;
    /**
     * Vat rate if applicable
     * Amount have to be 0.10 for 10%
     */
    vatRate?: number;
    /**
     * The name of the option
     */
    label?: string | null;
    /**
     * The description of the option
     */
    description?: string | null;
};

/**
 * A basic form model
 */
export type HelloAssoApiV5ModelsFormsFormBasicModel = {
    /**
     * The form slug
     */
    formSlug?: string | null;
    formType?: HelloAssoApiV5ModelsEnumsFormType;
    /**
     * The form url
     */
    url?: string | null;
    /**
     * The organization slug
     */
    organizationSlug?: string | null;
};

/**
 * FormLightModel class
 */
export type HelloAssoApiV5ModelsFormsFormLightModel = {
    banner?: HelloAssoApiV5ModelsCommonDocumentModel;
    /**
     * Currency
     */
    currency?: string | null;
    /**
     * Short description (one line)
     */
    description?: string | null;
    /**
     * The datetime of the activity start
     */
    startDate?: string | null;
    /**
     * The datetime of the activity end
     */
    endDate?: string | null;
    logo?: HelloAssoApiV5ModelsCommonDocumentModel;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
    state?: HelloAssoApiV5ModelsEnumsFormState;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Private Title
     */
    privateTitle?: string | null;
    /**
     * Url of the widget button
     */
    widgetButtonUrl?: string | null;
    /**
     * Url of the form widget
     */
    widgetFullUrl?: string | null;
    /**
     * Url of the horizontal vignette widget
     */
    widgetVignetteHorizontalUrl?: string | null;
    /**
     * Url of the vertical vignette widget
     */
    widgetVignetteVerticalUrl?: string | null;
    /**
     * Url of the counter widget
     */
    widgetCounterUrl?: string | null;
    /**
     * The form slug
     */
    formSlug?: string | null;
    formType?: HelloAssoApiV5ModelsEnumsFormType;
    /**
     * The form url
     */
    url?: string | null;
    /**
     * The organization slug
     */
    organizationSlug?: string | null;
};

/**
 * FormPublicModel class
 */
export type HelloAssoApiV5ModelsFormsFormPublicModelReadable = {
    /**
     * Organization Logo
     */
    organizationLogo?: string | null;
    /**
     * Organization Name
     */
    organizationName?: string | null;
    /**
     * Tiers
     */
    tiers: Array<HelloAssoApiV5ModelsFormsTierPublicModelReadable> | null;
    /**
     * Activity type of the event eg. "Atelier(s) / Stage(s)" matching one of the provided type values <a href="index#!/Values/Values_Get"> provided here</a> or a custom value is allowed.
     */
    activityType?: string | null;
    /**
     * Activity type identifier
     */
    activityTypeId?: number;
    place?: HelloAssoApiV5ModelsCommonPlaceModel;
    /**
     * The datetime (Inclusive) at which the sales end.
     * If null the orders will be available until the end of the campaign.
     */
    saleEndDate?: string | null;
    /**
     * The datetime (Inclusive) at which the users can start placing orders.
     * If null the orders will be available as soon as the campaign is published.
     */
    saleStartDate?: string | null;
    validityType?: HelloAssoApiV5ModelsEnumsMembershipValidityType;
    /**
     * A message customized by the organization administrator.
     */
    personalizedMessage?: string | null;
    banner?: HelloAssoApiV5ModelsCommonDocumentModel;
    /**
     * Currency
     */
    currency: string | null;
    /**
     * Short description (one line)
     */
    description?: string | null;
    /**
     * The datetime of the activity start
     */
    startDate: string | null;
    /**
     * The datetime of the activity end
     */
    endDate: string | null;
    logo?: HelloAssoApiV5ModelsCommonDocumentModel;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
    state?: HelloAssoApiV5ModelsEnumsFormState;
    /**
     * Title
     */
    title: string | null;
    /**
     * Private Title
     */
    privateTitle?: string | null;
    /**
     * Url of the widget button
     */
    widgetButtonUrl?: string | null;
    /**
     * Url of the form widget
     */
    widgetFullUrl?: string | null;
    /**
     * Url of the horizontal vignette widget
     */
    widgetVignetteHorizontalUrl?: string | null;
    /**
     * Url of the vertical vignette widget
     */
    widgetVignetteVerticalUrl?: string | null;
    /**
     * Url of the counter widget
     */
    widgetCounterUrl?: string | null;
    /**
     * The form slug
     */
    formSlug: string | null;
    formType?: HelloAssoApiV5ModelsEnumsFormType;
    /**
     * The form url
     */
    url?: string | null;
    /**
     * The organization slug
     */
    organizationSlug?: string | null;
};

/**
 * FormPublicModel class
 */
export type HelloAssoApiV5ModelsFormsFormPublicModelWritable = {
    /**
     * Organization Logo
     */
    organizationLogo?: string | null;
    /**
     * Organization Name
     */
    organizationName?: string | null;
    /**
     * Tiers
     */
    tiers: Array<HelloAssoApiV5ModelsFormsTierPublicModelWritable> | null;
    /**
     * Activity type of the event eg. "Atelier(s) / Stage(s)" matching one of the provided type values <a href="index#!/Values/Values_Get"> provided here</a> or a custom value is allowed.
     */
    activityType?: string | null;
    /**
     * Activity type identifier
     */
    activityTypeId?: number;
    place?: HelloAssoApiV5ModelsCommonPlaceModel;
    /**
     * The datetime (Inclusive) at which the sales end.
     * If null the orders will be available until the end of the campaign.
     */
    saleEndDate?: string | null;
    /**
     * The datetime (Inclusive) at which the users can start placing orders.
     * If null the orders will be available as soon as the campaign is published.
     */
    saleStartDate?: string | null;
    validityType?: HelloAssoApiV5ModelsEnumsMembershipValidityType;
    /**
     * A message customized by the organization administrator.
     */
    personalizedMessage?: string | null;
    banner?: HelloAssoApiV5ModelsCommonDocumentModel;
    /**
     * Currency
     */
    currency: string | null;
    /**
     * Short description (one line)
     */
    description?: string | null;
    /**
     * The datetime of the activity start
     */
    startDate: string | null;
    /**
     * The datetime of the activity end
     */
    endDate: string | null;
    logo?: HelloAssoApiV5ModelsCommonDocumentModel;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
    state?: HelloAssoApiV5ModelsEnumsFormState;
    /**
     * Title
     */
    title: string | null;
    /**
     * Private Title
     */
    privateTitle?: string | null;
    /**
     * Url of the widget button
     */
    widgetButtonUrl?: string | null;
    /**
     * Url of the form widget
     */
    widgetFullUrl?: string | null;
    /**
     * Url of the horizontal vignette widget
     */
    widgetVignetteHorizontalUrl?: string | null;
    /**
     * Url of the vertical vignette widget
     */
    widgetVignetteVerticalUrl?: string | null;
    /**
     * Url of the counter widget
     */
    widgetCounterUrl?: string | null;
    /**
     * The form slug
     */
    formSlug: string | null;
    formType?: HelloAssoApiV5ModelsEnumsFormType;
    /**
     * The form url
     */
    url?: string | null;
    /**
     * The organization slug
     */
    organizationSlug?: string | null;
};

export type HelloAssoApiV5ModelsFormsFormQuickCreateModel = {
    formSlug?: string | null;
    organizationSlug?: string | null;
    publicUrl?: string | null;
};

export type HelloAssoApiV5ModelsFormsFormQuickCreateRequest = {
    tierList?: Array<HelloAssoApiV5ModelsFormsTierLightModel> | null;
    /**
     * The banner of the form
     */
    banner?: string | null;
    /**
     * The description of form
     */
    description?: string | null;
    /**
     * The datetime of the activity end
     */
    endDate?: string | null;
    /**
     * The logo of the form
     */
    logo?: string | null;
    /**
     * Private Title : displayed only in the organization back office
     */
    privateTitle?: string | null;
    /**
     * The datetime of the activity start
     */
    startDate?: string | null;
    /**
     * The title of the form. It will be used to generate the url which that can't be changed.
     */
    title: string;
    /**
     * Activity type identifier, matching one of the provided type values <a href="index#!/Values/Values_Get"> provided here</a>
     */
    activityTypeId?: number | null;
    place?: HelloAssoApiV5ModelsCommonPlaceModel;
    /**
     * The datetime (Inclusive) at which the sales end.
     * If null the orders will be available until the end of the campaign.
     */
    saleEndDate?: string | null;
    /**
     * The datetime (Inclusive) at which the users can start placing orders.
     * If null the orders will be available as soon as the campaign is published.
     */
    saleStartDate?: string | null;
    validityType?: HelloAssoApiV5ModelsEnumsMembershipValidityType;
    /**
     * Whether the user will be allowed to make a single open donation with an order. The amount of the donation is open, but 3 presets can be set in OpenDonationPresetAmount
     */
    acceptOpenDonation?: boolean;
    /**
     * Whether the user will be allowed to make a monthly open donation for donation forms
     */
    acceptOpenMonthlyDonation?: boolean;
    /**
     * allowComment
     */
    allowComment?: boolean;
    /**
     * amountVisible
     */
    amountVisible?: boolean;
    /**
     * The color of the form
     */
    color?: string | null;
    /**
     * The text displayed in the widget button
     */
    widgetButtonText?: string | null;
    contact?: HelloAssoApiV5ModelsCommonContactModel;
    /**
     * Display contributor name for fundraiser
     */
    displayContributorName?: boolean;
    /**
     * Indicates that the members count must be displayed on the form.
     */
    displayParticipantsCount?: boolean;
    /**
     * Indicates that the remaining entries must be displayed on the form.
     */
    displayRemainingEntries?: boolean;
    /**
     * Indicates the financial goal (amount of money raised) for the whole form. Null means no goal.
     */
    financialGoal?: number | null;
    /**
     * Entrust the issuance of membership cards to HelloAsso (automatically sent by email to participants)
     */
    generateMembershipCards?: boolean;
    /**
     * Entrust the issuance of tickets to HelloAsso (automatically sent by email to participants)
     */
    generateTickets?: boolean;
    /**
     * Allows you to add the long description above the store catalog.
     */
    invertDescriptions?: boolean;
    /**
     * Label conditions and terms file
     */
    labelConditionsAndTermsFile?: string | null;
    /**
     * The long description of the form (rich Html)
     */
    longDescription?: string | null;
    /**
     * The preset amounts to be shown to the user. Maximum 3 amounts.
     */
    openDonationPresetAmounts?: Array<number> | null;
    /**
     * Personalized message for participants
     */
    personalizedMessage?: string | null;
    /**
     * The project beneficiaries of the form (rich Html)
     */
    projectBeneficiaries?: string | null;
    /**
     * Details of the project expenses (rich Html)
     */
    projectExpensesDetails?: string | null;
    /**
     * Description of the project owners (rich Html)
     */
    projectOwners?: string | null;
    /**
     * 3 letter country code
     */
    projectTargetCountry?: string | null;
    /**
     * Whether users are allowed to contribute to this form through an organism (only for donation and crowdfunding).
     */
    allowOrganismPayer?: boolean;
    /**
     * Whether user are allowed to personally contribute to this form (only for donation and crowdfunding).
     */
    allowIndividualPayer?: boolean;
    /**
     * The form display version (only for donation).
     */
    displayVersion?: number | null;
    /**
     * Indicates the maximum available entries for the whole form. Null means unlimited entries.
     */
    maxEntries?: number | null;
};

/**
 * TermsModel class
 */
export type HelloAssoApiV5ModelsFormsTermModel = {
    /**
     * Term Date
     */
    date?: string | null;
    /**
     * Term Amount
     */
    amount?: number;
};

export type HelloAssoApiV5ModelsFormsTierLightModel = {
    label?: string | null;
    price?: number;
};

/**
 * TierPublicModel class
 */
export type HelloAssoApiV5ModelsFormsTierPublicModelReadable = {
    /**
     * List of custom fields to be filled by the user
     */
    customFields?: Array<HelloAssoApiV5ModelsFormsCustomFieldPublicModelReadable> | null;
    /**
     * List of available extra options to buy along the tier
     */
    extraOptions?: Array<HelloAssoApiV5ModelsFormsExtraOptionPublicModelReadable> | null;
    /**
     * id
     */
    id: number;
    /**
     * label
     */
    label: string | null;
    /**
     * description
     */
    description?: string | null;
    tierType: HelloAssoApiV5ModelsEnumsTierType;
    /**
     * the Price in cents
     * if price equals 0 then it is free or there is a MinAmount
     */
    price: number | null;
    /**
     * Vat rate if applicable
     * Amount have to be 0.10 for 10%
     */
    vatRate: number;
    /**
     * If set, it means the payment is free to choose, according to the specified minAmount in cents
     */
    minAmount?: number | null;
    paymentFrequency: HelloAssoApiV5ModelsEnumsPaymentFrequencyType;
    /**
     * Max quantity buyable in this cart
     */
    maxPerUser?: number | null;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
    /**
     * The datetime (Inclusive) at which the users can start buying this tier.
     * If null the tier will be available at the start of the event.
     */
    saleStartDate?: string | null;
    /**
     * The datetime (Inclusive) at which the tier is no longer available.
     * If null the tier will be available until the end of the event.
     */
    saleEndDate?: string | null;
    /**
     * Whether this is eligible to a deduction
     */
    isEligibleTaxReceipt?: boolean;
    /**
     * Terms of tier
     */
    terms?: Array<HelloAssoApiV5ModelsFormsTermModel> | null;
    picture?: HelloAssoApiV5ModelsCommonDocumentModel;
    /**
     * True means this tier must be paid in the initial payment, false means it can be paid in payment with installments
     * Null when the form payment terms are disabled or not compatible with the related form
     */
    isExcludedFromFormPaymentTerms?: boolean | null;
};

/**
 * TierPublicModel class
 */
export type HelloAssoApiV5ModelsFormsTierPublicModelWritable = {
    /**
     * List of custom fields to be filled by the user
     */
    customFields?: Array<HelloAssoApiV5ModelsFormsCustomFieldPublicModelWritable> | null;
    /**
     * List of available extra options to buy along the tier
     */
    extraOptions?: Array<HelloAssoApiV5ModelsFormsExtraOptionPublicModelWritable> | null;
    /**
     * id
     */
    id: number;
    /**
     * label
     */
    label: string | null;
    /**
     * description
     */
    description?: string | null;
    tierType: HelloAssoApiV5ModelsEnumsTierType;
    /**
     * the Price in cents
     * if price equals 0 then it is free or there is a MinAmount
     */
    price: number | null;
    /**
     * Vat rate if applicable
     * Amount have to be 0.10 for 10%
     */
    vatRate: number;
    /**
     * If set, it means the payment is free to choose, according to the specified minAmount in cents
     */
    minAmount?: number | null;
    paymentFrequency: HelloAssoApiV5ModelsEnumsPaymentFrequencyType;
    /**
     * Max quantity buyable in this cart
     */
    maxPerUser?: number | null;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
    /**
     * The datetime (Inclusive) at which the users can start buying this tier.
     * If null the tier will be available at the start of the event.
     */
    saleStartDate?: string | null;
    /**
     * The datetime (Inclusive) at which the tier is no longer available.
     * If null the tier will be available until the end of the event.
     */
    saleEndDate?: string | null;
    /**
     * Whether this is eligible to a deduction
     */
    isEligibleTaxReceipt?: boolean;
    /**
     * Terms of tier
     */
    terms?: Array<HelloAssoApiV5ModelsFormsTermModel> | null;
    picture?: HelloAssoApiV5ModelsCommonDocumentModel;
    /**
     * True means this tier must be paid in the initial payment, false means it can be paid in payment with installments
     * Null when the form payment terms are disabled or not compatible with the related form
     */
    isExcludedFromFormPaymentTerms?: boolean | null;
};

/**
 * A basic organization model
 */
export type HelloAssoApiV5ModelsOrganizationOrganizationBasicModel = {
    /**
     * The organization url
     */
    url?: string | null;
    /**
     * The organization slug
     */
    organizationSlug?: string | null;
};

/**
 * OrganizationLightModel class
 */
export type HelloAssoApiV5ModelsOrganizationOrganizationLightModel = {
    /**
     * Logo of organization
     */
    logo?: string | null;
    /**
     * Name of organization
     */
    name?: string | null;
    role?: HelloAssoModelsEnumsGlobalRole;
    /**
     * Organization city
     */
    city?: string | null;
    /**
     * Organization zip code
     */
    zipCode?: string | null;
    /**
     * Organization description
     */
    description?: string | null;
    /**
     * Last update date of the organization
     */
    updateDate?: string;
    categoryJoId?: number | null;
    /**
     * The organization url
     */
    url?: string | null;
    /**
     * The organization slug
     */
    organizationSlug?: string | null;
};

/**
 * OrganizationsModel class
 */
export type HelloAssoApiV5ModelsOrganizationOrganizationModel = {
    /**
     * The organization is authenticated. Property returned only when asked by an organization admin.
     */
    isAuthenticated?: boolean | null;
    /**
     * If transaction can be init on the organization or not.
     */
    isCashInCompliant?: boolean | null;
    /**
     * The organization banner
     */
    banner?: string | null;
    /**
     * The organism can issue fiscal receipts (type ok and has not deactivated it)
     * Must configure it and be authenticated to become enabled
     */
    fiscalReceiptEligibility?: boolean;
    /**
     * The organism is eligible, has set up his options, and is authenticated.
     */
    fiscalReceiptIssuanceEnabled?: boolean;
    type?: HelloAssoApiV5ModelsEnumsOrganizationType;
    /**
     * Organization category label
     */
    category?: string | null;
    /**
     * Organization Address (for authorized applications or if authorized by the organization)
     */
    address?: string | null;
    geolocation?: HelloAssoModelsSharedGeoLocation;
    /**
     * Unique identifier assigned when creating the association
     */
    rnaNumber?: string | null;
    /**
     * Logo of organization
     */
    logo?: string | null;
    /**
     * Name of organization
     */
    name?: string | null;
    role?: HelloAssoModelsEnumsGlobalRole;
    /**
     * Organization city
     */
    city?: string | null;
    /**
     * Organization zip code
     */
    zipCode?: string | null;
    /**
     * Organization description
     */
    description?: string | null;
    /**
     * Last update date of the organization
     */
    updateDate?: string;
    categoryJoId?: number | null;
    /**
     * The organization url
     */
    url?: string | null;
    /**
     * The organization slug
     */
    organizationSlug?: string | null;
};

export type HelloAssoApiV5ModelsOrganizationLegalInformationsOrganizationLegalStructuresModel = {
    id?: number;
    legalStructure?: string | null;
    agreement?: string | null;
    isFiscalReceiptEligible?: boolean;
};

export type HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationFiscalReceiptTransmitterBody = {
    isHelloAssoFiscalReceiptTransmitter?: boolean;
};

export type HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationLegalInformationConfigurationBody = {
    legalStructureId: number;
    isColuche: boolean;
    allowIfiTaxReductions: boolean;
};

export type HelloAssoApiV5ModelsPartnerStatisticsModel = {
    /**
     * Number of organizations linked to this partner
     */
    linkedOrganizationsCount?: number;
    /**
     * Collected amount by linked organizations
     */
    linkedOrganizationsCollectedAmount?: number;
    /**
     * Collected amount by All partner checkouts
     */
    checkoutCollectedAmount?: number;
    /**
     * Number of organizations using the checkout with this partner
     */
    organizationsUsingCheckout?: number;
    /**
     * Number of organizations access token obtains by authorize flow
     */
    availableOrganizationsAccessTokenCount?: number;
};

export type HelloAssoApiV5ModelsPartnersPartnerPublicModel = {
    /**
     * Name of the partner
     */
    name?: string | null;
    /**
     * Display Name of the partner
     */
    displayName?: string | null;
    /**
     * Description of the partner
     */
    description?: string | null;
    /**
     * Website of the partner
     */
    url?: string | null;
    /**
     * Logo of the partner : square format
     */
    logo?: string | null;
    /**
     * Logo of the partner : rectangle format
     */
    logoRectangle?: string | null;
    apiClient?: HelloAssoApiV5ModelsAccountsClientsApiClientModel;
    /**
     * Url Notification of the partner
     */
    urlNotificationList?: Array<HelloAssoApiV5ModelsApiNotificationsApiUrlNotificationModel> | null;
    partnerStatistics?: HelloAssoApiV5ModelsPartnerStatisticsModel;
};

export type HelloAssoApiV5ModelsPaymentPublicPaymentModel = {
    /**
     * The payment id
     */
    id?: number;
    /**
     * The Organization id, which the payment was made to
     */
    organizationId?: number;
    /**
     * The form id where the payment was made. Used with FormType
     */
    formId?: number | null;
    formType?: HelloAssoApiV5ModelsEnumsFormType;
    /**
     * Amount
     */
    amount?: number;
    meansPayment?: HelloAssoApiV5ModelsEnumsPaymentMeans;
    cashOutState?: HelloAssoApiV5ModelsEnumsPaymentCashOutState;
    /**
     * The payment Date.
     */
    date?: string;
    /**
     * If the payment is authorized, this is the date of authorization
     */
    authorizationDate?: string | null;
    /**
     * Date at which the Order was placed.
     * Important for monthly payments or scheduled payments.
     */
    orderDate?: string;
    /**
     * The id of the order
     */
    orderId?: number;
    /**
     * Whether a Fiscal receipt document has been generated for this payment or not.
     */
    fiscalReceiptGenerated?: boolean;
    /**
     * The inputted payer first name, might differs from User firstname, from linked user Id
     */
    payerFirstName?: string | null;
    /**
     * The inputted payer last name,  might differs from User lastname, from linked user Id
     */
    payerLastName?: string | null;
    status?: HelloAssoApiV5ModelsEnumsPaymentState;
    /**
     * The user id who initiated the payment
     */
    userId?: number | null;
    /**
     * The name of the user who initiated the payment. May differ from PayerFirstName
     */
    userFirstName?: string | null;
    /**
     * The name of the user who initiated the payment. May differ from PayerLastName
     */
    userLastName?: string | null;
    /**
     * The email of the user account who initiated the payment.
     */
    userEmail?: string | null;
    /**
     * name of the provider
     */
    providerTitle?: string | null;
    /**
     * Indicates the payment number (useful in the case of an order comprising payments with installments)
     * Starting with 1.
     */
    installmentNumber?: number | null;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
    /**
     * List<RefundOperationLightModel>
     * The refund operations for the specific payment.
     */
    refundOperations?: Array<HelloAssoApiV5ModelsStatisticsRefundOperationLightModel> | null;
};

/**
 * RefundOperationModel class
 */
export type HelloAssoApiV5ModelsPaymentRefundOperationModel = {
    /**
     * The refund operation id
     */
    id?: number;
    /**
     * The amount to refund
     */
    amount?: number;
    /**
     * Whether the future payments and linked items of this order must be canceled (possible only if the payment is fully refunded)
     */
    cancelOrder?: boolean;
    /**
     * The refund operation creation date
     */
    creationDate?: string;
    state?: HelloAssoApiV5ModelsEnumsOperationState;
    /**
     * Whether a refund mail must be send or not.
     */
    sendRefundMail?: boolean;
    /**
     * The payment id
     */
    paymentId?: number;
};

/**
 * An item of an order
 */
export type HelloAssoApiV5ModelsStatisticsItem = {
    order?: HelloAssoApiV5ModelsStatisticsOrderLight;
    payer?: HelloAssoApiV5ModelsStatisticsPayer;
    /**
     * Payments linked to this item
     */
    payments?: Array<HelloAssoApiV5ModelsStatisticsItemPayment> | null;
    name?: string | null;
    user?: HelloAssoApiV5ModelsStatisticsUser;
    priceCategory?: HelloAssoApiV5ModelsEnumsPriceCategory;
    /**
     * Minimum amount that was specified on the tier (in cents)
     */
    minAmount?: number | null;
    discount?: HelloAssoApiV5ModelsStatisticsItemDiscount;
    /**
     * Custom fields related to this item
     */
    customFields?: Array<HelloAssoApiV5ModelsStatisticsItemCustomField> | null;
    /**
     * Extra options taken with this item
     */
    options?: Array<HelloAssoApiV5ModelsStatisticsItemOption> | null;
    /**
     * The Ticket Url
     */
    ticketUrl?: string | null;
    /**
     * The item QrCode (for ticket scanning only)
     */
    qrCode?: string | null;
    /**
     * The Membership Card Url
     */
    membershipCardUrl?: string | null;
    /**
     * The day of levy for monthly donation only
     */
    dayOfLevy?: number | null;
    /**
     * Tier description
     */
    tierDescription?: string | null;
    tierId?: number | null;
    comment?: string | null;
    /**
     * ID of the Item
     */
    id?: number;
    /**
     * Total item Price in cents (after discount without extra options)
     */
    amount?: number;
    type?: HelloAssoApiV5ModelsEnumsTierType;
    /**
     * The raw amount (without reduction)
     */
    initialAmount?: number | null;
    state?: HelloAssoApiV5ModelsEnumsItemState;
};

/**
 * Custom field associated with the item or option
 */
export type HelloAssoApiV5ModelsStatisticsItemCustomField = {
    id?: number;
    name?: string | null;
    type?: HelloAssoApiV5ModelsEnumsFieldType;
    /**
     * Participant or user answer
     */
    answer?: string | null;
};

export type HelloAssoApiV5ModelsStatisticsItemDetail = {
    order?: HelloAssoApiV5ModelsStatisticsOrderLight;
    payer?: HelloAssoApiV5ModelsStatisticsPayer;
    /**
     * Payments linked to this item
     */
    payments?: Array<HelloAssoApiV5ModelsStatisticsItemPayment> | null;
    name?: string | null;
    user?: HelloAssoApiV5ModelsStatisticsUser;
    priceCategory?: HelloAssoApiV5ModelsEnumsPriceCategory;
    /**
     * Minimum amount that was specified on the tier (in cents)
     */
    minAmount?: number | null;
    discount?: HelloAssoApiV5ModelsStatisticsItemDiscount;
    /**
     * Custom fields related to this item
     */
    customFields?: Array<HelloAssoApiV5ModelsStatisticsItemCustomField> | null;
    /**
     * Extra options taken with this item
     */
    options?: Array<HelloAssoApiV5ModelsStatisticsItemOption> | null;
    /**
     * The Ticket Url
     */
    ticketUrl?: string | null;
    /**
     * The item QrCode (for ticket scanning only)
     */
    qrCode?: string | null;
    /**
     * The Membership Card Url
     */
    membershipCardUrl?: string | null;
    /**
     * The day of levy for monthly donation only
     */
    dayOfLevy?: number | null;
    /**
     * Tier description
     */
    tierDescription?: string | null;
    tierId?: number | null;
    comment?: string | null;
    /**
     * ID of the Item
     */
    id?: number;
    /**
     * Total item Price in cents (after discount without extra options)
     */
    amount?: number;
    type?: HelloAssoApiV5ModelsEnumsTierType;
    /**
     * The raw amount (without reduction)
     */
    initialAmount?: number | null;
    state?: HelloAssoApiV5ModelsEnumsItemState;
};

export type HelloAssoApiV5ModelsStatisticsItemDiscount = {
    /**
     * The discount code applied on the item
     */
    code?: string | null;
    /**
     * The discount amount in cents
     */
    amount?: number;
};

/**
 * ItemOption class
 */
export type HelloAssoApiV5ModelsStatisticsItemOption = {
    /**
     * Name of the option
     */
    name?: string | null;
    /**
     * Amount of the option in cents
     */
    amount?: number;
    priceCategory?: HelloAssoApiV5ModelsEnumsPriceCategory;
    /**
     * Option is required or optional
     */
    isRequired?: boolean;
    /**
     * Custom fields related to this option
     */
    customFields?: Array<HelloAssoApiV5ModelsStatisticsItemCustomField> | null;
    optionId?: number;
};

/**
 * Payment linked to the item
 */
export type HelloAssoApiV5ModelsStatisticsItemPayment = {
    cashOutState?: HelloAssoApiV5ModelsEnumsPaymentCashOutState;
    /**
     * Amount of the item and extra options payed on this payment term (in cents)
     */
    shareAmount?: number;
    /**
     * The ID of the payment
     */
    id?: number;
    /**
     * Total Amount of the payment (in cents)
     */
    amount?: number;
    /**
     * Tip Amount of the payment (in cents)
     */
    amountTip?: number | null;
    /**
     * Date of the payment
     */
    date?: string;
    paymentMeans?: HelloAssoApiV5ModelsEnumsPaymentMeans;
    /**
     * Indicates the payment number (useful in the case of an order comprising payments with installments)
     */
    installmentNumber?: number | null;
    state?: HelloAssoApiV5ModelsEnumsPaymentState;
    type?: HelloAssoApiV5ModelsEnumsPaymentType;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
    paymentOffLineMean?: HelloAssoApiV5ModelsEnumsPaymentMeans;
    /**
     * List<RefundOperationLightModel>
     * The refund operations information for the specific payment.
     */
    refundOperations?: Array<HelloAssoApiV5ModelsStatisticsRefundOperationLightModel> | null;
};

export type HelloAssoApiV5ModelsStatisticsOrder = {
    payer: HelloAssoApiV5ModelsStatisticsPayer;
    /**
     * All items of the order
     */
    items: Array<HelloAssoApiV5ModelsStatisticsOrderItem> | null;
    /**
     * All payments of the order
     */
    payments: Array<HelloAssoApiV5ModelsStatisticsOrderPayment> | null;
    amount: HelloAssoApiV5ModelsStatisticsOrderAmountModel;
    /**
     * The ID of the Order
     */
    id: number;
    /**
     * Order creation date
     */
    date: string;
    /**
     * FormSlug (lowercase name of the form without special characters)
     */
    formSlug: string | null;
    formType: HelloAssoApiV5ModelsEnumsFormType;
    /**
     * The organization name.
     */
    organizationName: string | null;
    /**
     * OrganizationSlug (lowercase name of the organization without special characters)
     */
    organizationSlug: string | null;
    organizationType: HelloAssoApiV5ModelsEnumsOrganizationType;
    /**
     * Whether or not the organization is subject to the coluche law
     */
    organizationIsUnderColucheLaw: boolean;
    /**
     * Checkout intent Id if available
     */
    checkoutIntentId: number | null;
    meta: HelloAssoApiV5ModelsCommonMetaModel;
};

export type HelloAssoApiV5ModelsStatisticsOrderAmountModel = {
    /**
     * Total amount in cents
     */
    total?: number;
    /**
     * Vat amount in cents
     */
    vat?: number;
    /**
     * Discount amount in cents
     */
    discount?: number;
};

export type HelloAssoApiV5ModelsStatisticsOrderDetail = {
    payer?: HelloAssoApiV5ModelsStatisticsPayer;
    /**
     * All items of the order
     */
    items?: Array<HelloAssoApiV5ModelsStatisticsOrderItem> | null;
    /**
     * All payments of the order
     */
    payments?: Array<HelloAssoApiV5ModelsStatisticsOrderPayment> | null;
    amount?: HelloAssoApiV5ModelsStatisticsOrderAmountModel;
    /**
     * The ID of the Order
     */
    id?: number;
    /**
     * Order creation date
     */
    date?: string;
    /**
     * FormSlug (lowercase name of the form without special characters)
     */
    formSlug?: string | null;
    formType?: HelloAssoApiV5ModelsEnumsFormType;
    /**
     * The organization name.
     */
    organizationName?: string | null;
    /**
     * OrganizationSlug (lowercase name of the organization without special characters)
     */
    organizationSlug?: string | null;
    organizationType?: HelloAssoApiV5ModelsEnumsOrganizationType;
    /**
     * Whether or not the organization is subject to the coluche law
     */
    organizationIsUnderColucheLaw?: boolean;
    /**
     * Checkout intent Id if available
     */
    checkoutIntentId?: number | null;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
};

/**
 * Item on the order
 */
export type HelloAssoApiV5ModelsStatisticsOrderItem = {
    /**
     * Payments linked to this item and each share between the item and the payment
     */
    payments?: Array<HelloAssoApiV5ModelsStatisticsSharePayment> | null;
    name?: string | null;
    user?: HelloAssoApiV5ModelsStatisticsUser;
    priceCategory?: HelloAssoApiV5ModelsEnumsPriceCategory;
    /**
     * Minimum amount that was specified on the tier (in cents)
     */
    minAmount?: number | null;
    discount?: HelloAssoApiV5ModelsStatisticsItemDiscount;
    /**
     * Custom fields related to this item
     */
    customFields?: Array<HelloAssoApiV5ModelsStatisticsItemCustomField> | null;
    /**
     * Extra options taken with this item
     */
    options?: Array<HelloAssoApiV5ModelsStatisticsItemOption> | null;
    /**
     * The Ticket Url
     */
    ticketUrl?: string | null;
    /**
     * The item QrCode (for ticket scanning only)
     */
    qrCode?: string | null;
    /**
     * The Membership Card Url
     */
    membershipCardUrl?: string | null;
    /**
     * The day of levy for monthly donation only
     */
    dayOfLevy?: number | null;
    /**
     * Tier description
     */
    tierDescription?: string | null;
    tierId?: number | null;
    comment?: string | null;
    /**
     * ID of the Item
     */
    id?: number;
    /**
     * Total item Price in cents (after discount without extra options)
     */
    amount?: number;
    type?: HelloAssoApiV5ModelsEnumsTierType;
    /**
     * The raw amount (without reduction)
     */
    initialAmount?: number | null;
    state?: HelloAssoApiV5ModelsEnumsItemState;
};

export type HelloAssoApiV5ModelsStatisticsOrderLight = {
    /**
     * The ID of the Order
     */
    id?: number;
    /**
     * Order creation date
     */
    date?: string;
    /**
     * FormSlug (lowercase name of the form without special characters)
     */
    formSlug?: string | null;
    formType?: HelloAssoApiV5ModelsEnumsFormType;
    /**
     * The organization name.
     */
    organizationName?: string | null;
    /**
     * OrganizationSlug (lowercase name of the organization without special characters)
     */
    organizationSlug?: string | null;
    organizationType?: HelloAssoApiV5ModelsEnumsOrganizationType;
    /**
     * Whether or not the organization is subject to the coluche law
     */
    organizationIsUnderColucheLaw?: boolean;
    /**
     * Checkout intent Id if available
     */
    checkoutIntentId?: number | null;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
};

/**
 * Payment on the order
 */
export type HelloAssoApiV5ModelsStatisticsOrderPayment = {
    /**
     * Items linked to this payment and each share between the item and the payment
     */
    items?: Array<HelloAssoApiV5ModelsStatisticsShareItem> | null;
    /**
     * The date of the cash out
     */
    cashOutDate?: string | null;
    cashOutState?: HelloAssoApiV5ModelsEnumsPaymentCashOutState;
    /**
     * The Payment Receipt Url
     */
    paymentReceiptUrl?: string | null;
    /**
     * The Fiscal Receipt Url
     */
    fiscalReceiptUrl?: string | null;
    /**
     * The ID of the payment
     */
    id?: number;
    /**
     * Total Amount of the payment (in cents)
     */
    amount?: number;
    /**
     * Tip Amount of the payment (in cents)
     */
    amountTip?: number | null;
    /**
     * Date of the payment
     */
    date?: string;
    paymentMeans?: HelloAssoApiV5ModelsEnumsPaymentMeans;
    /**
     * Indicates the payment number (useful in the case of an order comprising payments with installments)
     */
    installmentNumber?: number | null;
    state?: HelloAssoApiV5ModelsEnumsPaymentState;
    type?: HelloAssoApiV5ModelsEnumsPaymentType;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
    paymentOffLineMean?: HelloAssoApiV5ModelsEnumsPaymentMeans;
    /**
     * List<RefundOperationLightModel>
     * The refund operations information for the specific payment.
     */
    refundOperations?: Array<HelloAssoApiV5ModelsStatisticsRefundOperationLightModel> | null;
};

export type HelloAssoApiV5ModelsStatisticsPayer = {
    email?: string | null;
    /**
     * Gets or Sets Address
     */
    address?: string | null;
    /**
     * Gets or Sets City
     */
    city?: string | null;
    /**
     * Gets or Sets ZipCode
     */
    zipCode?: string | null;
    /**
     * Gets or Sets Country
     */
    country?: string | null;
    /**
     * Gets or Sets Company
     */
    company?: string | null;
    /**
     * Gets or Sets date of birth
     */
    dateOfBirth?: string | null;
    firstName?: string | null;
    lastName?: string | null;
};

export type HelloAssoApiV5ModelsStatisticsPayment = {
    order?: HelloAssoApiV5ModelsStatisticsOrderLight;
    payer?: HelloAssoApiV5ModelsStatisticsPayer;
    /**
     * Items linked to this payment
     */
    items?: Array<HelloAssoApiV5ModelsStatisticsPaymentItem> | null;
    /**
     * The date of the cash out
     */
    cashOutDate?: string | null;
    cashOutState?: HelloAssoApiV5ModelsEnumsPaymentCashOutState;
    /**
     * The Payment Receipt Url
     */
    paymentReceiptUrl?: string | null;
    /**
     * The Fiscal Receipt Url
     */
    fiscalReceiptUrl?: string | null;
    /**
     * The ID of the payment
     */
    id?: number;
    /**
     * Total Amount of the payment (in cents)
     */
    amount?: number;
    /**
     * Tip Amount of the payment (in cents)
     */
    amountTip?: number | null;
    /**
     * Date of the payment
     */
    date?: string;
    paymentMeans?: HelloAssoApiV5ModelsEnumsPaymentMeans;
    /**
     * Indicates the payment number (useful in the case of an order comprising payments with installments)
     */
    installmentNumber?: number | null;
    state?: HelloAssoApiV5ModelsEnumsPaymentState;
    type?: HelloAssoApiV5ModelsEnumsPaymentType;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
    paymentOffLineMean?: HelloAssoApiV5ModelsEnumsPaymentMeans;
    /**
     * List<RefundOperationLightModel>
     * The refund operations information for the specific payment.
     */
    refundOperations?: Array<HelloAssoApiV5ModelsStatisticsRefundOperationLightModel> | null;
};

export type HelloAssoApiV5ModelsStatisticsPaymentDetail = {
    order?: HelloAssoApiV5ModelsStatisticsOrderLight;
    payer?: HelloAssoApiV5ModelsStatisticsPayer;
    /**
     * Items linked to this payment
     */
    items?: Array<HelloAssoApiV5ModelsStatisticsPaymentItem> | null;
    /**
     * The date of the cash out
     */
    cashOutDate?: string | null;
    cashOutState?: HelloAssoApiV5ModelsEnumsPaymentCashOutState;
    /**
     * The Payment Receipt Url
     */
    paymentReceiptUrl?: string | null;
    /**
     * The Fiscal Receipt Url
     */
    fiscalReceiptUrl?: string | null;
    /**
     * The ID of the payment
     */
    id?: number;
    /**
     * Total Amount of the payment (in cents)
     */
    amount?: number;
    /**
     * Tip Amount of the payment (in cents)
     */
    amountTip?: number | null;
    /**
     * Date of the payment
     */
    date?: string;
    paymentMeans?: HelloAssoApiV5ModelsEnumsPaymentMeans;
    /**
     * Indicates the payment number (useful in the case of an order comprising payments with installments)
     */
    installmentNumber?: number | null;
    state?: HelloAssoApiV5ModelsEnumsPaymentState;
    type?: HelloAssoApiV5ModelsEnumsPaymentType;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
    paymentOffLineMean?: HelloAssoApiV5ModelsEnumsPaymentMeans;
    /**
     * List<RefundOperationLightModel>
     * The refund operations information for the specific payment.
     */
    refundOperations?: Array<HelloAssoApiV5ModelsStatisticsRefundOperationLightModel> | null;
};

/**
 * Item linked to a payment
 */
export type HelloAssoApiV5ModelsStatisticsPaymentItem = {
    /**
     * Amount of the payment assigned to the item and its options (in cents)
     */
    shareAmount?: number;
    /**
     * Amount of the item payed on this payment term (in cents)
     */
    shareItemAmount?: number;
    /**
     * Amount of all extra options linked to this item and payed on this payment (in cents)
     */
    shareOptionsAmount?: number | null;
    /**
     * ID of the Item
     */
    id?: number;
    /**
     * Total item Price in cents (after discount without extra options)
     */
    amount?: number;
    type?: HelloAssoApiV5ModelsEnumsTierType;
    /**
     * The raw amount (without reduction)
     */
    initialAmount?: number | null;
    state?: HelloAssoApiV5ModelsEnumsItemState;
    /**
     * Name of the item paid (relevant for checkout forms)
     */
    name?: string | null;
};

/**
 * The refund operation with the Id, amount, amount tip and the status.
 */
export type HelloAssoApiV5ModelsStatisticsRefundOperationLightModel = {
    /**
     * The refund operation identifier.
     */
    id?: number;
    /**
     * The amount for this refund.
     */
    amount?: number;
    /**
     * The amount tip for this refund.
     */
    amountTip?: number;
    status?: HelloAssoApiV5ModelsEnumsOperationState;
    meta?: HelloAssoApiV5ModelsCommonMetaModel;
};

export type HelloAssoApiV5ModelsStatisticsShareItem = {
    /**
     * Id of the order item
     */
    id?: number;
    /**
     * Amount of the payment assigned to the item and its options (in cents)
     */
    shareAmount?: number;
    /**
     * Amount of the item payed on this payment term (in cents)
     */
    shareItemAmount?: number;
    /**
     * Amount of all extra options linked to this item and payed on this payment (in cents)
     */
    shareOptionsAmount?: number | null;
};

export type HelloAssoApiV5ModelsStatisticsSharePayment = {
    /**
     * Id of the payment
     */
    id?: number;
    /**
     * Amount of the item payed on this payment term (in cents)
     */
    shareAmount?: number;
};

export type HelloAssoApiV5ModelsStatisticsUser = {
    firstName?: string | null;
    lastName?: string | null;
};

/**
 * InternalTagModel class
 */
export type HelloAssoApiV5ModelsTagsInternalTagModel = {
    /**
     * Tag Id
     */
    id?: number;
    /**
     * Name tag
     */
    name?: string | null;
    /**
     * Count of times Tag is used by forms
     */
    formCount?: number | null;
    /**
     * Count of times Tag is used by Organizations
     */
    organizationCount?: number | null;
    tagType?: HelloAssoApiV5ModelsEnumsTagType;
    tagParent?: HelloAssoApiV5ModelsTagsInternalTagModel;
    /**
     * Amount collected by all forms linked to this tag (in cents)
     */
    amountCollected?: number | null;
};

/**
 * PublicNameTagModel class
 */
export type HelloAssoApiV5ModelsTagsPublicTagModel = {
    /**
     * Name tag
     */
    name?: string | null;
    /**
     * Tag score : measure tag relevance
     */
    score?: number;
};

export type HelloAssoCoreAccountsTaxReceiptsOrganizationFiscalReceiptOptionsConfiguration = {
    purpose?: string | null;
    cerfaTypeId?: number | null;
    joCategoryId?: number | null;
    formatOptionModel?: HelloAssoModelsPaymentsCashInFiscalReceiptFiscalReceiptFormatOption;
    signatoryModel?: HelloAssoModelsAccountsOrganizationLegalInformationsFiscalReceiptSignatoryModel;
    addressModel?: HaTrustContractLegalInformationAddressAddressDto;
};

export type HelloAssoModelsAccountsOrganizationLegalInformationsFiscalReceiptSignatoryModel = {
    firstName?: string | null;
    lastName?: string | null;
    function?: string | null;
    fileUrl?: string | null;
};

export type HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationLegalInformationConfigurationReadable = {
    readonly legalStructureId?: number;
    readonly isHelloAssoFiscalReceiptTransmitter?: boolean | null;
    isColucheLawEnabled?: boolean;
    isIfiEnabled?: boolean;
};

export type HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationLegalInformationConfigurationWritable = {
    isColucheLawEnabled?: boolean;
    isIfiEnabled?: boolean;
};

export type HelloAssoModelsAccountsOrganizationLegalInformationsTaxInformationText = {
    isColucheLawEnabled?: boolean;
    isIfiEnabled?: boolean;
    individualText?: string | null;
    companyText?: string | null;
};

export type HelloAssoModelsEnumsGlobalRole = 'OrganizationAdmin' | 'FormAdmin';

export type HelloAssoModelsPaymentsCashInFiscalReceiptFiscalReceiptFormatOption = {
    date?: string | null;
    order?: string | null;
    root?: string | null;
    separator?: string | null;
};

export type HelloAssoModelsSharedGeoLocation = {
    latitude?: number;
    longitude?: number;
};

export type GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdData = {
    body?: never;
    path: {
        organizationSlug: string;
        checkoutIntentId: number;
    };
    query?: {
        withFailedRefundOperation?: boolean;
    };
    url: '/organizations/{organizationSlug}/checkout-intents/{checkoutIntentId}';
};

export type GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsCartsCheckoutIntentResponse;
};

export type GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdResponse = GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdResponses[keyof GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdResponses];

export type PostOrganizationsByOrganizationSlugCheckoutIntentsData = {
    body?: HelloAssoApiV5ModelsCartsInitCheckoutBody;
    path: {
        organizationSlug: string;
    };
    query?: never;
    url: '/organizations/{organizationSlug}/checkout-intents';
};

export type PostOrganizationsByOrganizationSlugCheckoutIntentsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type PostOrganizationsByOrganizationSlugCheckoutIntentsResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsCartsInitCheckoutResponse;
};

export type PostOrganizationsByOrganizationSlugCheckoutIntentsResponse = PostOrganizationsByOrganizationSlugCheckoutIntentsResponses[keyof PostOrganizationsByOrganizationSlugCheckoutIntentsResponses];

export type PostDirectoryFormsData = {
    /**
     * Body which contains the filters to apply
     */
    body?: HelloAssoApiV5ModelsDirectoryListFormsRequest;
    path?: never;
    query?: {
        /**
         * The number of items per page
         */
        pageSize?: number;
        /**
         * Continuation Token from which we wish to retrieve results
         */
        continuationToken?: string;
    };
    url: '/directory/forms';
};

export type PostDirectoryFormsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type PostDirectoryFormsResponses = {
    /**
     * Success
     */
    200: ResultsWithPaginationModelSynchronizableFormModel;
};

export type PostDirectoryFormsResponse = PostDirectoryFormsResponses[keyof PostDirectoryFormsResponses];

export type PostDirectoryOrganizationsData = {
    /**
     * Body which contains the filters to apply
     */
    body?: HelloAssoApiV5ModelsDirectoryListOrganizationsRequest;
    path?: never;
    query?: {
        /**
         * The number of items per page
         */
        pageSize?: number;
        /**
         * Continuation Token from which we wish to retrieve results
         */
        continuationToken?: string;
    };
    url: '/directory/organizations';
};

export type PostDirectoryOrganizationsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type PostDirectoryOrganizationsResponses = {
    /**
     * Success
     */
    200: ResultsWithPaginationModelSynchronizableOrganizationModel;
};

export type PostDirectoryOrganizationsResponse = PostDirectoryOrganizationsResponses[keyof PostDirectoryOrganizationsResponses];

export type PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateData = {
    /**
     * The body of the request.
     */
    body?: HelloAssoApiV5ModelsFormsFormQuickCreateRequest;
    path: {
        /**
         * The organization Slug
         */
        organizationSlug: string;
        /**
         * The form type to create - only Event type is supported
         */
        formType: HelloAssoApiV5ModelsEnumsFormType;
    };
    query?: never;
    url: '/organizations/{organizationSlug}/forms/{formType}/action/quick-create';
};

export type PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsFormsFormQuickCreateModel;
};

export type PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateResponse = PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateResponses[keyof PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateResponses];

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicData = {
    body?: never;
    path: {
        organizationSlug: string;
        formType: HelloAssoApiV5ModelsEnumsFormType;
        formSlug: string;
    };
    query?: never;
    url: '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/public';
};

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsFormsFormPublicModelReadable;
};

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicResponse = GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicResponses[keyof GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicResponses];

export type GetOrganizationsByOrganizationSlugFormTypesData = {
    body?: never;
    path: {
        /**
         * The organization Slug
         */
        organizationSlug: string;
    };
    query?: {
        /**
         * List<FormState>
         * List of Form States to filter with. If none specified, it won't filter results.
         *
         * Available values:
         * * `Public` - The form is publicly visible and findable on search engines
         * * `Private` - The form is visible only with the URL, you cannot find it on search engines
         * * `Draft` - The form is not yet published but visible if you have admin rights
         * * `Disabled` - The form is disabled and can be reenabled by changing state to public or private
         */
        states?: Array<HelloAssoApiV5ModelsEnumsFormState>;
    };
    url: '/organizations/{organizationSlug}/formTypes';
};

export type GetOrganizationsByOrganizationSlugFormTypesErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugFormTypesResponses = {
    /**
     * Success
     */
    200: Array<HelloAssoApiV5ModelsEnumsFormType>;
};

export type GetOrganizationsByOrganizationSlugFormTypesResponse = GetOrganizationsByOrganizationSlugFormTypesResponses[keyof GetOrganizationsByOrganizationSlugFormTypesResponses];

export type GetOrganizationsByOrganizationSlugFormsData = {
    body?: never;
    path: {
        /**
         * The organization Slug
         */
        organizationSlug: string;
    };
    query?: {
        /**
         * List<FormState>
         * States to filter
         *
         * Available values:
         * * `Public` - The form is publicly visible and findable on search engines
         * * `Private` - The form is visible only with the URL, you cannot find it on search engines
         * * `Draft` - The form is not yet published but visible if you have admin rights
         * * `Disabled` - The form is disabled and can be reenabled by changing state to public or private
         */
        states?: Array<HelloAssoApiV5ModelsEnumsFormState>;
        /**
         * List<FormType>
         * Types to filter
         */
        formTypes?: Array<HelloAssoApiV5ModelsEnumsFormType>;
        /**
         * The page of results to retrieve
         */
        pageIndex?: number;
        /**
         * The number of items per page
         */
        pageSize?: number;
        /**
         * Continuation Token from which we wish to retrieve results
         */
        continuationToken?: string;
    };
    url: '/organizations/{organizationSlug}/forms';
};

export type GetOrganizationsByOrganizationSlugFormsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugFormsResponses = {
    /**
     * Success
     */
    200: ResultsWithPaginationModelFormLightModel;
};

export type GetOrganizationsByOrganizationSlugFormsResponse = GetOrganizationsByOrganizationSlugFormsResponses[keyof GetOrganizationsByOrganizationSlugFormsResponses];

export type GetItemsByItemIdData = {
    body?: never;
    path: {
        /**
         * The item ID
         */
        itemId: number;
    };
    query?: {
        /**
         * Set to true to return CustomFields and Options
         */
        withDetails?: boolean;
    };
    url: '/items/{itemId}';
};

export type GetItemsByItemIdErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetItemsByItemIdResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsStatisticsItemDetail;
};

export type GetItemsByItemIdResponse = GetItemsByItemIdResponses[keyof GetItemsByItemIdResponses];

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugItemsData = {
    body?: never;
    path: {
        /**
         * The organization slug
         */
        organizationSlug: string;
        /**
         * The form slug
         */
        formSlug: string;
        /**
         * The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop
         */
        formType: HelloAssoApiV5ModelsEnumsFormType;
    };
    query?: {
        /**
         * First Date Filter
         */
        from?: string;
        /**
         * End Date Filter (exclusive)
         */
        to?: string;
        /**
         * Filter results on user or payer first name, last name or email
         */
        userSearchKey?: string;
        /**
         * The page of results to retrieve
         */
        pageIndex?: number;
        /**
         * The number of items per page
         */
        pageSize?: number;
        /**
         * Continuation Token from which we wish to retrieve results
         */
        continuationToken?: string;
        /**
         * List<TierType>
         * The type of tiers
         */
        tierTypes?: Array<HelloAssoApiV5ModelsEnumsTierType>;
        /**
         * List<ItemState>
         * The item states
         *
         * Available values:
         * * `Processed` - The item is paid and is valid
         * * `Registered` - The item has been registered manually by the organization and is valid
         * * `Unknown`
         * * `Canceled` - The item has been canceled, and is no longer valid
         */
        itemStates?: Array<HelloAssoApiV5ModelsEnumsItemState>;
        /**
         * The name of a tier
         */
        tierName?: string;
        /**
         * Set to true to return CustomFields and Options
         */
        withDetails?: boolean;
        /**
         * Sort forms items by ascending or descending order. Default is descending
         */
        sortOrder?: HelloAssoApiV5ModelsEnumsSortOrder;
        /**
         * Sort forms items by a specific field (Date or UpdateDate). Default is date
         */
        sortField?: HelloAssoApiV5ModelsEnumsSortField;
        /**
         * Whether the pagination should include totalCount and totalPages.
         */
        withCount?: boolean;
    };
    url: '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/items';
};

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugItemsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugItemsResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetOrganizationsByOrganizationSlugItemsData = {
    body?: never;
    path: {
        /**
         * The organization slug
         */
        organizationSlug: string;
    };
    query?: {
        /**
         * First Date Filter
         */
        from?: string;
        /**
         * End Date Filter (exclusive)
         */
        to?: string;
        /**
         * Filter results on user or payer first name, last name or email
         */
        userSearchKey?: string;
        /**
         * The page of results to retrieve
         */
        pageIndex?: number;
        /**
         * The number of items per page
         */
        pageSize?: number;
        /**
         * Continuation Token from which we wish to retrieve results
         */
        continuationToken?: string;
        /**
         * List<TierType>
         * The type of tiers Donation, Payment, Registration, Membership, MonthlyDonation, MonthlyPayment, OfflineDonation, Contribution, Bonus
         */
        tierTypes?: Array<HelloAssoApiV5ModelsEnumsTierType>;
        /**
         * List<ItemState>
         * The item states
         *
         * Available values:
         * * `Processed` - The item is paid and is valid
         * * `Registered` - The item has been registered manually by the organization and is valid
         * * `Unknown`
         * * `Canceled` - The item has been canceled, and is no longer valid
         */
        itemStates?: Array<HelloAssoApiV5ModelsEnumsItemState>;
        /**
         * The name of a tier
         */
        tierName?: string;
        /**
         * Set to true to return CustomFields and Options
         */
        withDetails?: boolean;
        /**
         * Sort organizations items by ascending or descending order. Default is descending
         */
        sortOrder?: HelloAssoApiV5ModelsEnumsSortOrder;
        /**
         * Sort organizations items by a specific field (Date or UpdateDate). Default is date
         */
        sortField?: HelloAssoApiV5ModelsEnumsSortField;
        /**
         * Whether the pagination should include totalCount and totalPages.
         */
        withCount?: boolean;
    };
    url: '/organizations/{organizationSlug}/items';
};

export type GetOrganizationsByOrganizationSlugItemsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugItemsResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetOrdersByOrderIdData = {
    body?: never;
    path: {
        orderId: number;
    };
    query?: never;
    url: '/orders/{orderId}';
};

export type GetOrdersByOrderIdErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrdersByOrderIdResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsStatisticsOrderDetail;
};

export type GetOrdersByOrderIdResponse = GetOrdersByOrderIdResponses[keyof GetOrdersByOrderIdResponses];

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersData = {
    body?: never;
    path: {
        /**
         * The organization slug
         */
        organizationSlug: string;
        /**
         * The form slug
         */
        formSlug: string;
        /**
         * The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop
         */
        formType: HelloAssoApiV5ModelsEnumsFormType;
    };
    query?: {
        /**
         * First Date Filter
         */
        from?: string;
        /**
         * End Date Filter (exclusive)
         */
        to?: string;
        /**
         * Filter results on user or payer first name, last name or email
         */
        userSearchKey?: string;
        /**
         * The page of results to retrieve
         */
        pageIndex?: number;
        /**
         * The number of items per page
         */
        pageSize?: number;
        /**
         * Continuation Token from which we wish to retrieve results
         */
        continuationToken?: string;
        /**
         * Set to true to return CustomFields
         */
        withDetails?: boolean;
        /**
         * Sort forms orders by ascending or descending order. Default is descending
         */
        sortOrder?: HelloAssoApiV5ModelsEnumsSortOrder;
        /**
         * Whether the pagination should include totalCount and totalPages.
         */
        withCount?: boolean;
    };
    url: '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/orders';
};

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersResponses = {
    /**
     * Success
     */
    200: ResultsWithPaginationModelOrder;
};

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersResponse = GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersResponses[keyof GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersResponses];

export type GetOrganizationsByOrganizationSlugOrdersData = {
    body?: never;
    path: {
        /**
         * The organization slug
         */
        organizationSlug: string;
    };
    query?: {
        /**
         * First Date Filter
         */
        from?: string;
        /**
         * End Date Filter (exclusive)
         */
        to?: string;
        /**
         * Filter results on user or payer first name, last name or email
         */
        userSearchKey?: string;
        /**
         * The page of results to retrieve
         */
        pageIndex?: number;
        /**
         * The number of items per page
         */
        pageSize?: number;
        /**
         * Continuation Token from which we wish to retrieve results
         */
        continuationToken?: string;
        /**
         * List<FormType>
         * The type of the form CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop
         */
        formTypes?: Array<HelloAssoApiV5ModelsEnumsFormType>;
        /**
         * Set to true to return CustomFields
         */
        withDetails?: boolean;
        /**
         * Sort organizations orders by ascending or descending order. Default is descending
         */
        sortOrder?: HelloAssoApiV5ModelsEnumsSortOrder;
        /**
         * Whether the pagination should include totalCount and totalPages.
         */
        withCount?: boolean;
    };
    url: '/organizations/{organizationSlug}/orders';
};

export type GetOrganizationsByOrganizationSlugOrdersErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugOrdersResponses = {
    /**
     * Success
     */
    200: ResultsWithPaginationModelOrder;
};

export type GetOrganizationsByOrganizationSlugOrdersResponse = GetOrganizationsByOrganizationSlugOrdersResponses[keyof GetOrganizationsByOrganizationSlugOrdersResponses];

export type PostOrdersByOrderIdCancelData = {
    body?: never;
    path: {
        /**
         * The order identifier.
         */
        orderId: number;
    };
    query?: never;
    url: '/orders/{orderId}/cancel';
};

export type PostOrdersByOrderIdCancelErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type PostOrdersByOrderIdCancelResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetOrganizationsLegalInformationsLegalStructuresData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/organizations/legal-informations/legal-structures';
};

export type GetOrganizationsLegalInformationsLegalStructuresErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetOrganizationsLegalInformationsLegalStructuresResponses = {
    /**
     * List<OrganizationLegalStructuresModel>
     * Success
     */
    200: Array<HelloAssoApiV5ModelsOrganizationLegalInformationsOrganizationLegalStructuresModel>;
};

export type GetOrganizationsLegalInformationsLegalStructuresResponse = GetOrganizationsLegalInformationsLegalStructuresResponses[keyof GetOrganizationsLegalInformationsLegalStructuresResponses];

export type GetOrganizationsLegalInformationsTaxInformationTextsData = {
    body?: never;
    path?: never;
    query?: {
        organizationSlug?: string;
    };
    url: '/organizations/legal-informations/tax-information-texts';
};

export type GetOrganizationsLegalInformationsTaxInformationTextsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetOrganizationsLegalInformationsTaxInformationTextsResponses = {
    /**
     * List<TaxInformationText>
     * Success
     */
    200: Array<HelloAssoModelsAccountsOrganizationLegalInformationsTaxInformationText>;
};

export type GetOrganizationsLegalInformationsTaxInformationTextsResponse = GetOrganizationsLegalInformationsTaxInformationTextsResponses[keyof GetOrganizationsLegalInformationsTaxInformationTextsResponses];

export type GetOrganizationsLegalInformationsByOrganizationSlugConfigurationData = {
    body?: never;
    path: {
        organizationSlug: string;
    };
    query?: never;
    url: '/organizations/legal-informations/{organizationSlug}/configuration';
};

export type GetOrganizationsLegalInformationsByOrganizationSlugConfigurationErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetOrganizationsLegalInformationsByOrganizationSlugConfigurationResponses = {
    /**
     * Success
     */
    200: HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationLegalInformationConfigurationReadable;
};

export type GetOrganizationsLegalInformationsByOrganizationSlugConfigurationResponse = GetOrganizationsLegalInformationsByOrganizationSlugConfigurationResponses[keyof GetOrganizationsLegalInformationsByOrganizationSlugConfigurationResponses];

export type PutOrganizationsLegalInformationsByOrganizationSlugConfigurationData = {
    body?: HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationLegalInformationConfigurationBody;
    path: {
        organizationSlug: string;
    };
    query?: never;
    url: '/organizations/legal-informations/{organizationSlug}/configuration';
};

export type PutOrganizationsLegalInformationsByOrganizationSlugConfigurationErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type PutOrganizationsLegalInformationsByOrganizationSlugConfigurationResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetOrganizationsByOrganizationSlugData = {
    body?: never;
    path: {
        /**
         * The organization Slug
         */
        organizationSlug: string;
    };
    query?: never;
    url: '/organizations/{organizationSlug}';
};

export type GetOrganizationsByOrganizationSlugErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsOrganizationOrganizationModel;
};

export type GetOrganizationsByOrganizationSlugResponse = GetOrganizationsByOrganizationSlugResponses[keyof GetOrganizationsByOrganizationSlugResponses];

export type PutPartnersMeApiClientsData = {
    body?: HelloAssoApiV5ModelsAccountsClientsPublicPutApiClientRequest;
    path?: never;
    query?: never;
    url: '/partners/me/api-clients';
};

export type PutPartnersMeApiClientsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type PutPartnersMeApiClientsResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type DeletePartnersMeApiNotificationsOrganizationsByOrganizationSlugData = {
    body?: never;
    path: {
        organizationSlug: string;
    };
    query?: {
        /**
         * Do not specify a notification type to remove the main notification Url
         */
        notificationType?: HelloAssoApiV5ModelsApiNotificationsApiNotificationType;
    };
    url: '/partners/me/api-notifications/organizations/{organizationSlug}';
};

export type DeletePartnersMeApiNotificationsOrganizationsByOrganizationSlugErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type DeletePartnersMeApiNotificationsOrganizationsByOrganizationSlugResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugData = {
    /**
     * The body of the request, do not specify a notification type to update the main notification Url
     */
    body?: HelloAssoApiV5ModelsApiNotificationsPostApiUrlNotificationBody;
    path: {
        organizationSlug: string;
    };
    query?: never;
    url: '/partners/me/api-notifications/organizations/{organizationSlug}';
};

export type PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsApiNotificationsApiUrlNotificationModel;
};

export type PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugResponse = PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugResponses[keyof PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugResponses];

export type DeletePartnersMeApiNotificationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Do not specify a notification type to remove the main notification Url
         */
        notificationType?: HelloAssoApiV5ModelsApiNotificationsApiNotificationType;
    };
    url: '/partners/me/api-notifications';
};

export type DeletePartnersMeApiNotificationsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type DeletePartnersMeApiNotificationsResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type PutPartnersMeApiNotificationsData = {
    /**
     * The body of the request, do not specify a notification type to update the main notification Url
     */
    body?: HelloAssoApiV5ModelsApiNotificationsPostApiUrlNotificationBody;
    path?: never;
    query?: never;
    url: '/partners/me/api-notifications';
};

export type PutPartnersMeApiNotificationsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type PutPartnersMeApiNotificationsResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsApiNotificationsApiUrlNotificationModel;
};

export type PutPartnersMeApiNotificationsResponse = PutPartnersMeApiNotificationsResponses[keyof PutPartnersMeApiNotificationsResponses];

export type GetPartnersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/partners/me';
};

export type GetPartnersMeErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetPartnersMeResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsPartnersPartnerPublicModel;
};

export type GetPartnersMeResponse = GetPartnersMeResponses[keyof GetPartnersMeResponses];

export type GetPartnersMeOrganizationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The number of items per page
         */
        pageSize?: number;
        /**
         * Continuation Token from which we wish to retrieve results
         */
        continuationToken?: string;
    };
    url: '/partners/me/organizations';
};

export type GetPartnersMeOrganizationsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetPartnersMeOrganizationsResponses = {
    /**
     * Success
     */
    200: ResultsWithPaginationModelPartnerOrganizationModel;
};

export type GetPartnersMeOrganizationsResponse = GetPartnersMeOrganizationsResponses[keyof GetPartnersMeOrganizationsResponses];

export type GetPaymentsByPaymentIdData = {
    body?: never;
    path: {
        /**
         * The payment identifier.
         */
        paymentId: number;
    };
    query?: {
        /**
         * True to retrieve the refund operation in the states 'ABORTED', 'CANCELED', 'ERROR', 'REFUSED'.
         */
        withFailedRefundOperation?: boolean;
    };
    url: '/payments/{paymentId}';
};

export type GetPaymentsByPaymentIdErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetPaymentsByPaymentIdResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsStatisticsPaymentDetail;
};

export type GetPaymentsByPaymentIdResponse = GetPaymentsByPaymentIdResponses[keyof GetPaymentsByPaymentIdResponses];

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsData = {
    body?: never;
    path: {
        /**
         * The organization slug
         */
        organizationSlug: string;
        /**
         * The form slug
         */
        formSlug: string;
        /**
         * The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop
         */
        formType: HelloAssoApiV5ModelsEnumsFormType;
    };
    query?: {
        /**
         * First Date Filter
         */
        from?: string;
        /**
         * End Date Filter (exclusive)
         */
        to?: string;
        /**
         * Filter results on user or payer first name, last name or email
         */
        userSearchKey?: string;
        /**
         * The page of results to retrieve
         */
        pageIndex?: number;
        /**
         * The number of items per page
         */
        pageSize?: number;
        /**
         * Continuation Token from which we wish to retrieve results
         */
        continuationToken?: string;
        /**
         * List<PaymentState>
         * Filter results by states of payments
         *
         * Available values:
         * * `Pending` - A payment scheduled at a later date, not yet processed.
         * * `Authorized` - The payment has been authorized, validated, processed.
         * * `Refused` - The payment has been refused by the bank.
         * * `Unknown`
         * * `Registered` - Represents a payment made offline.
         * Probably for an item of type
         * * `Refunded` - The payment has been refunded.
         * * `Refunding` - The payment is being refunded.
         * * `Contested` - Payment has been contested by the contributor
         */
        states?: Array<HelloAssoApiV5ModelsEnumsPaymentState>;
        /**
         * Sort payments by ascending or descending order. Default is descending
         */
        sortOrder?: HelloAssoApiV5ModelsEnumsSortOrder;
        /**
         * Sort payments by a specific field (Date or UpdateDate). Default is date
         */
        sortField?: HelloAssoApiV5ModelsEnumsSortField;
        /**
         * Whether the pagination should include totalCount and totalPages.
         */
        withCount?: boolean;
    };
    url: '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/payments';
};

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsResponses = {
    /**
     * Success
     */
    200: ResultsWithPaginationModelPayment;
};

export type GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsResponse = GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsResponses[keyof GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsResponses];

export type GetOrganizationsByOrganizationSlugPaymentsData = {
    body?: never;
    path: {
        /**
         * The organization Slug
         */
        organizationSlug: string;
    };
    query?: {
        /**
         * First Date Filter
         */
        from?: string;
        /**
         * End Date Filter (exclusive)
         */
        to?: string;
        /**
         * Filter results on user or payer first name, last name or email
         */
        userSearchKey?: string;
        /**
         * The page of results to retrieve
         */
        pageIndex?: number;
        /**
         * The number of items per page
         */
        pageSize?: number;
        /**
         * Continuation Token from which we wish to retrieve results
         */
        continuationToken?: string;
        /**
         * List<PaymentState>
         * The payment states
         *
         * Available values:
         * * `Pending` - A payment scheduled at a later date, not yet processed.
         * * `Authorized` - The payment has been authorized, validated, processed.
         * * `Refused` - The payment has been refused by the bank.
         * * `Unknown`
         * * `Registered` - Represents a payment made offline.
         * Probably for an item of type
         * * `Refunded` - The payment has been refunded.
         * * `Refunding` - The payment is being refunded.
         * * `Contested` - Payment has been contested by the contributor
         */
        states?: Array<HelloAssoApiV5ModelsEnumsPaymentState>;
        /**
         * Sort payments by ascending or descending order. Default is descending
         */
        sortOrder?: HelloAssoApiV5ModelsEnumsSortOrder;
        /**
         * Sort payments by a specific field (Date or UpdateDate). Default is date
         */
        sortField?: HelloAssoApiV5ModelsEnumsSortField;
        /**
         * Whether the pagination should include totalCount and totalPages.
         */
        withCount?: boolean;
    };
    url: '/organizations/{organizationSlug}/payments';
};

export type GetOrganizationsByOrganizationSlugPaymentsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugPaymentsResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type PostPaymentsByPaymentIdRefundData = {
    body?: never;
    path: {
        /**
         * The payment identifier.
         */
        paymentId: number;
    };
    query?: {
        /**
         * The comment about this refund.
         */
        comment?: string;
        /**
         * Whether the future payments and linked items of this order must be canceled (possible only if the payment is fully refunded)
         */
        cancelOrder?: boolean;
        /**
         * Whether a refund mail must be sent or not.
         */
        sendRefundMail?: boolean;
        /**
         * The amount in cents to refund. Enter this amount only for a partial refund for stripe. If not filled in then the entire payment is refunded
         */
        amount?: number;
    };
    url: '/payments/{paymentId}/refund';
};

export type PostPaymentsByPaymentIdRefundErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type PostPaymentsByPaymentIdRefundResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsPaymentRefundOperationModel;
};

export type PostPaymentsByPaymentIdRefundResponse = PostPaymentsByPaymentIdRefundResponses[keyof PostPaymentsByPaymentIdRefundResponses];

export type GetOrganizationsByOrganizationSlugPaymentsSearchData = {
    body?: never;
    path: {
        /**
         * The organization slug
         */
        organizationSlug: string;
    };
    query?: {
        /**
         * First Date Filter
         */
        from?: string;
        /**
         * End Date Filter (exclusive)
         */
        to?: string;
        /**
         * The number of items to retrieve
         */
        pageSize?: number;
        /**
         * Continuation Token from which we wish to retrieve results
         */
        continuationToken?: string;
        /**
         * List<FormType>
         * The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop
         */
        formTypes?: Array<HelloAssoApiV5ModelsEnumsFormType>;
        /**
         * The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop. This parameter must be used with the parameter formId.
         */
        formType?: HelloAssoApiV5ModelsEnumsFormType;
        /**
         * List<PaymentState>
         * Filter results by states of payments
         *
         * Available values:
         * * `Pending` - A payment scheduled at a later date, not yet processed.
         * * `Authorized` - The payment has been authorized, validated, processed.
         * * `Refused` - The payment has been refused by the bank.
         * * `Unknown`
         * * `Registered` - Represents a payment made offline.
         * Probably for an item of type
         * * `Refunded` - The payment has been refunded.
         * * `Refunding` - The payment is being refunded.
         * * `Contested` - Payment has been contested by the contributor
         */
        states?: Array<HelloAssoApiV5ModelsEnumsPaymentState>;
        /**
         * The User identifier
         */
        userId?: number;
        /**
         * Filter results on user or payer first name, last name or email.
         */
        searchKey?: string;
        /**
         * Amount of the payment in cents. Filter payments with exact amount with or without the contribution.
         */
        amount?: number;
        /**
         * Sort payments by ascending or descending order. Default is descending
         */
        sortOrder?: HelloAssoApiV5ModelsEnumsSortOrder;
        /**
         * Sort payments by a specific field (Date or UpdateDate). Default is date
         */
        sortField?: HelloAssoApiV5ModelsEnumsSortField;
    };
    url: '/organizations/{organizationSlug}/payments/search';
};

export type GetOrganizationsByOrganizationSlugPaymentsSearchErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetOrganizationsByOrganizationSlugPaymentsSearchResponses = {
    /**
     * Success
     */
    200: ResultsWithPaginationModelPublicPaymentModel;
};

export type GetOrganizationsByOrganizationSlugPaymentsSearchResponse = GetOrganizationsByOrganizationSlugPaymentsSearchResponses[keyof GetOrganizationsByOrganizationSlugPaymentsSearchResponses];

export type GetTagsByTagNameData = {
    body?: never;
    path: {
        tagName: string;
    };
    query?: {
        /**
         * If true : Count of times Tag is used
         */
        withCount?: boolean;
        /**
         * If true : Amount collected by all forms linked to this Tag
         */
        withAmount?: boolean;
    };
    url: '/tags/{tagName}';
};

export type GetTagsByTagNameErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetTagsByTagNameResponses = {
    /**
     * Success
     */
    200: HelloAssoApiV5ModelsTagsInternalTagModel;
};

export type GetTagsByTagNameResponse = GetTagsByTagNameResponses[keyof GetTagsByTagNameResponses];

export type PutOrganizationsByOrganizationSlugTaxReceiptFiscalReceiptTransmitterData = {
    body?: HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationFiscalReceiptTransmitterBody;
    path: {
        organizationSlug: string;
    };
    query?: never;
    url: '/organizations/{organizationSlug}/tax-receipt/fiscal-receipt-transmitter';
};

export type PutOrganizationsByOrganizationSlugTaxReceiptFiscalReceiptTransmitterErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type PutOrganizationsByOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetOrganizationsByOrganizationSlugTaxReceiptConfigurationData = {
    body?: never;
    path: {
        organizationSlug: string;
    };
    query?: never;
    url: '/organizations/{organizationSlug}/tax-receipt/configuration';
};

export type GetOrganizationsByOrganizationSlugTaxReceiptConfigurationErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
};

export type GetOrganizationsByOrganizationSlugTaxReceiptConfigurationResponses = {
    /**
     * Success
     */
    200: HelloAssoCoreAccountsTaxReceiptsOrganizationFiscalReceiptOptionsConfiguration;
};

export type GetOrganizationsByOrganizationSlugTaxReceiptConfigurationResponse = GetOrganizationsByOrganizationSlugTaxReceiptConfigurationResponses[keyof GetOrganizationsByOrganizationSlugTaxReceiptConfigurationResponses];

export type PutOrganizationsByOrganizationSlugTaxReceiptConfigurationData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        organizationSlug: string;
    };
    query: {
        /**
         * Upload File
         */
        file: Blob | File;
        /**
         * config
         */
        config?: string;
    };
    url: '/organizations/{organizationSlug}/tax-receipt/configuration';
};

export type PutOrganizationsByOrganizationSlugTaxReceiptConfigurationErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
    /**
     * Not Found
     */
    404: unknown;
    /**
     * Client Error
     */
    415: unknown;
};

export type PutOrganizationsByOrganizationSlugTaxReceiptConfigurationResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type PostOrganizationsByOrganizationSlugTaxReceiptPreviewData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        organizationSlug: string;
    };
    query: {
        /**
         * Upload File
         */
        file: Blob | File;
        /**
         * config
         */
        config?: string;
    };
    url: '/organizations/{organizationSlug}/tax-receipt/preview';
};

export type PostOrganizationsByOrganizationSlugTaxReceiptPreviewErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
    /**
     * Client Error
     */
    415: unknown;
};

export type PostOrganizationsByOrganizationSlugTaxReceiptPreviewResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetUsersMeOrganizationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me/organizations';
};

export type GetUsersMeOrganizationsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetUsersMeOrganizationsResponses = {
    /**
     * Success
     */
    200: Array<HelloAssoApiV5ModelsOrganizationOrganizationLightModel>;
};

export type GetUsersMeOrganizationsResponse = GetUsersMeOrganizationsResponses[keyof GetUsersMeOrganizationsResponses];

export type GetValuesOrganizationCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/values/organization/categories';
};

export type GetValuesOrganizationCategoriesErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetValuesOrganizationCategoriesResponses = {
    /**
     * Success
     */
    200: Array<HelloAssoApiV5ModelsAccountOrganismCategoryModel>;
};

export type GetValuesOrganizationCategoriesResponse = GetValuesOrganizationCategoriesResponses[keyof GetValuesOrganizationCategoriesResponses];

export type GetValuesTagsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/values/tags';
};

export type GetValuesTagsErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetValuesTagsResponses = {
    /**
     * Success
     */
    200: Array<HelloAssoApiV5ModelsTagsPublicTagModel>;
};

export type GetValuesTagsResponse = GetValuesTagsResponses[keyof GetValuesTagsResponses];

export type GetValuesCompanyLegalStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/values/company-legal-status';
};

export type GetValuesCompanyLegalStatusErrors = {
    /**
     * Unauthorized, you must add a valid JWT into Authorization Header with the format : `Bearer TOKEN`
     */
    401: unknown;
    /**
     * The JWT token hasn't the privileges or Roles for this action
     */
    403: unknown;
};

export type GetValuesCompanyLegalStatusResponses = {
    /**
     * Success
     */
    200: Array<HelloAssoApiV5ModelsAccountCompanyLegalStatusModel>;
};

export type GetValuesCompanyLegalStatusResponse = GetValuesCompanyLegalStatusResponses[keyof GetValuesCompanyLegalStatusResponses];

export type ClientOptions = {
    baseUrl: 'https://api.helloasso.com/v5' | (string & {});
};