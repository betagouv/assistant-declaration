// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdData, GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdResponses, GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdErrors, PostOrganizationsByOrganizationSlugCheckoutIntentsData, PostOrganizationsByOrganizationSlugCheckoutIntentsResponses, PostOrganizationsByOrganizationSlugCheckoutIntentsErrors, PostDirectoryFormsData, PostDirectoryFormsResponses, PostDirectoryFormsErrors, PostDirectoryOrganizationsData, PostDirectoryOrganizationsResponses, PostDirectoryOrganizationsErrors, PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateData, PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateResponses, PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateErrors, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicData, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicResponses, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicErrors, GetOrganizationsByOrganizationSlugFormTypesData, GetOrganizationsByOrganizationSlugFormTypesResponses, GetOrganizationsByOrganizationSlugFormTypesErrors, GetOrganizationsByOrganizationSlugFormsData, GetOrganizationsByOrganizationSlugFormsResponses, GetOrganizationsByOrganizationSlugFormsErrors, GetItemsByItemIdData, GetItemsByItemIdResponses, GetItemsByItemIdErrors, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugItemsData, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugItemsResponses, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugItemsErrors, GetOrganizationsByOrganizationSlugItemsData, GetOrganizationsByOrganizationSlugItemsResponses, GetOrganizationsByOrganizationSlugItemsErrors, GetOrdersByOrderIdData, GetOrdersByOrderIdResponses, GetOrdersByOrderIdErrors, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersData, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersResponses, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersErrors, GetOrganizationsByOrganizationSlugOrdersData, GetOrganizationsByOrganizationSlugOrdersResponses, GetOrganizationsByOrganizationSlugOrdersErrors, PostOrdersByOrderIdCancelData, PostOrdersByOrderIdCancelResponses, PostOrdersByOrderIdCancelErrors, GetOrganizationsLegalInformationsLegalStructuresData, GetOrganizationsLegalInformationsLegalStructuresResponses, GetOrganizationsLegalInformationsLegalStructuresErrors, GetOrganizationsLegalInformationsTaxInformationTextsData, GetOrganizationsLegalInformationsTaxInformationTextsResponses, GetOrganizationsLegalInformationsTaxInformationTextsErrors, GetOrganizationsLegalInformationsByOrganizationSlugConfigurationData, GetOrganizationsLegalInformationsByOrganizationSlugConfigurationResponses, GetOrganizationsLegalInformationsByOrganizationSlugConfigurationErrors, PutOrganizationsLegalInformationsByOrganizationSlugConfigurationData, PutOrganizationsLegalInformationsByOrganizationSlugConfigurationResponses, PutOrganizationsLegalInformationsByOrganizationSlugConfigurationErrors, GetOrganizationsByOrganizationSlugData, GetOrganizationsByOrganizationSlugResponses, GetOrganizationsByOrganizationSlugErrors, PutPartnersMeApiClientsData, PutPartnersMeApiClientsResponses, PutPartnersMeApiClientsErrors, DeletePartnersMeApiNotificationsOrganizationsByOrganizationSlugData, DeletePartnersMeApiNotificationsOrganizationsByOrganizationSlugResponses, DeletePartnersMeApiNotificationsOrganizationsByOrganizationSlugErrors, PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugData, PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugResponses, PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugErrors, DeletePartnersMeApiNotificationsData, DeletePartnersMeApiNotificationsResponses, DeletePartnersMeApiNotificationsErrors, PutPartnersMeApiNotificationsData, PutPartnersMeApiNotificationsResponses, PutPartnersMeApiNotificationsErrors, GetPartnersMeData, GetPartnersMeResponses, GetPartnersMeErrors, GetPartnersMeOrganizationsData, GetPartnersMeOrganizationsResponses, GetPartnersMeOrganizationsErrors, GetPaymentsByPaymentIdData, GetPaymentsByPaymentIdResponses, GetPaymentsByPaymentIdErrors, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsData, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsResponses, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsErrors, GetOrganizationsByOrganizationSlugPaymentsData, GetOrganizationsByOrganizationSlugPaymentsResponses, GetOrganizationsByOrganizationSlugPaymentsErrors, PostPaymentsByPaymentIdRefundData, PostPaymentsByPaymentIdRefundResponses, PostPaymentsByPaymentIdRefundErrors, GetOrganizationsByOrganizationSlugPaymentsSearchData, GetOrganizationsByOrganizationSlugPaymentsSearchResponses, GetOrganizationsByOrganizationSlugPaymentsSearchErrors, GetTagsByTagNameData, GetTagsByTagNameResponses, GetTagsByTagNameErrors, PutOrganizationsByOrganizationSlugTaxReceiptFiscalReceiptTransmitterData, PutOrganizationsByOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponses, PutOrganizationsByOrganizationSlugTaxReceiptFiscalReceiptTransmitterErrors, GetOrganizationsByOrganizationSlugTaxReceiptConfigurationData, GetOrganizationsByOrganizationSlugTaxReceiptConfigurationResponses, GetOrganizationsByOrganizationSlugTaxReceiptConfigurationErrors, PutOrganizationsByOrganizationSlugTaxReceiptConfigurationData, PutOrganizationsByOrganizationSlugTaxReceiptConfigurationResponses, PutOrganizationsByOrganizationSlugTaxReceiptConfigurationErrors, PostOrganizationsByOrganizationSlugTaxReceiptPreviewData, PostOrganizationsByOrganizationSlugTaxReceiptPreviewResponses, PostOrganizationsByOrganizationSlugTaxReceiptPreviewErrors, GetUsersMeOrganizationsData, GetUsersMeOrganizationsResponses, GetUsersMeOrganizationsErrors, GetValuesOrganizationCategoriesData, GetValuesOrganizationCategoriesResponses, GetValuesOrganizationCategoriesErrors, GetValuesTagsData, GetValuesTagsResponses, GetValuesTagsErrors, GetValuesCompanyLegalStatusData, GetValuesCompanyLegalStatusResponses, GetValuesCompanyLegalStatusErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Récupérer une intention de paiement
 * Retourne aussi la commande associée. Uniquement dans le cas ou le paiement est autorisé.<br/><br/><b>Votre clientId doit avoir ces autorisations : </b> <br/> Checkout<br/><br/>
 */
export const getOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentId = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdResponses, GetOrganizationsByOrganizationSlugCheckoutIntentsByCheckoutIntentIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/checkout-intents/{checkoutIntentId}',
        ...options
    });
};

/**
 * Initialisation d'un Checkout
 * Pour tout savoir sur Checkout consultez d'abord notre <a href="https://dev.helloasso.com/docs/description">documentation</a><br/><br/><b>Votre clientId doit avoir ces autorisations : </b> <br/> Checkout<br/><br/>
 */
export const postOrganizationsByOrganizationSlugCheckoutIntents = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsByOrganizationSlugCheckoutIntentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationsByOrganizationSlugCheckoutIntentsResponses, PostOrganizationsByOrganizationSlugCheckoutIntentsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/checkout-intents',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options.headers
        }
    });
};

/**
 * Récupérer les formulaires
 * Permet de récupérer une liste de tous les formulaires visibles correspondant à tous les filtres de l'annuaire jusqu'à ce qu'il soit synchronisé (en utilisant le continuationToken). Si aucun filtre n'est spécifié, aucun filtre n'est appliqué. Les résultats sont classés par date de mise à jour de la visibilité API en ordre croissant. Une fois la liste synchronisée, seuls les formulaires avec une date de mise à jour de la visibilité API supérieure à la dernière forme envoyée sont retournés (toujours en utilisant le continuationToken). Cela concerne les nouveaux formulaires à insérer (souhaitant apparaître de l'annuaire) ainsi que les anciens à supprimer (ne souhaitant plus apparaître dans l'annuaire). Le nombre total de résultats (ou de pages) n'est pas récupérable, donc les informations de pagination retournées indiqueront toujours -1.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> FormOpenDirectory<br/><br/>
 */
export const postDirectoryForms = <ThrowOnError extends boolean = false>(options?: Options<PostDirectoryFormsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDirectoryFormsResponses, PostDirectoryFormsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/directory/forms',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Récupérer les organisations
 * Permet de récupérer une liste de toutes les organisations visibles correspondant à tous les filtres de l'annuaire jusqu'à ce qu'il soit synchronisé (en utilisant le continuationToken). Si aucun filtre n'est spécifié, aucun filtre n'est appliqué. Les résultats sont classés par date de mise à jour de la visibilité API en ordre croissant. Une fois la liste synchronisée, seules les organisations avec une date de mise à jour de la visibilité API supérieure à la dernière organisation envoyée sont retournées (toujours en utilisant le continuationToken). Cela concerne les nouvelles organisations à insérer (souhaitant apparaître dans l'annuaire) ainsi que les anciennes à supprimer (ne souhaitant plus apparaître dans l'annuaire). Le nombre total de résultats (ou de pages) n'est pas récupérable, donc les informations de pagination retournées indiqueront toujours -1.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> OrganizationOpenDirectory<br/><br/>
 */
export const postDirectoryOrganizations = <ThrowOnError extends boolean = false>(options?: Options<PostDirectoryOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDirectoryOrganizationsResponses, PostDirectoryOrganizationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/directory/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Créer un événement simplifié pour un organisme
 * Permet la création d'un événement avec seulement des informations limitées et quelques tarifications simples. L'événement créé de cette manière peut être modifié ultérieurement avec d'autres services<br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> FormAdministration<br/><br/>
 */
export const postOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreate = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateResponses, PostOrganizationsByOrganizationSlugFormsByFormTypeActionQuickCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/forms/{formType}/action/quick-create',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options.headers
        }
    });
};

/**
 * Obtenir des données publiques détaillées sur un formulaire
 * Permet de récupérer toutes les informations publiques d'un formulaire, qu'il s'agisse de Crowdfunding, d'Adhésion, d'Événement, de Don...<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const getOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublic = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicResponses, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPublicErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/public',
        ...options
    });
};

/**
 * Obtenir une liste des types de formulaires pour une organisation
 * Liste tous les types de formulaires où l'organisation possède au moins un formulaire. Cela peut également être filtré par états.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const getOrganizationsByOrganizationSlugFormTypes = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugFormTypesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugFormTypesResponses, GetOrganizationsByOrganizationSlugFormTypesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/formTypes',
        ...options
    });
};

/**
 * Obtenir les formulaires d'une organisation
 * Liste tous les formulaires correspondant aux états et types. Si aucun filtre n'est spécifié, aucun filtre n'est appliqué. Les résultats sont classés par date de création en ordre décroissant.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const getOrganizationsByOrganizationSlugForms = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugFormsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugFormsResponses, GetOrganizationsByOrganizationSlugFormsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/forms',
        ...options
    });
};

/**
 * Obtenir le détail d'un article contenu dans une commande
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>FormAdmin<br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
 */
export const getItemsByItemId = <ThrowOnError extends boolean = false>(options: Options<GetItemsByItemIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemsByItemIdResponses, GetItemsByItemIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/items/{itemId}',
        ...options
    });
};

/**
 * Obtenir une liste d'articles vendus dans un formulaire
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>FormAdmin<br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
 */
export const getOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugItems = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugItemsResponses, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugItemsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/items',
        ...options
    });
};

/**
 * Obtenir une liste d'articles vendus par une organisation
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
 */
export const getOrganizationsByOrganizationSlugItems = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugItemsResponses, GetOrganizationsByOrganizationSlugItemsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/items',
        ...options
    });
};

/**
 * Obtenir des informations détaillées sur une commande
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>FormAdmin<br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
 */
export const getOrdersByOrderId = <ThrowOnError extends boolean = false>(options: Options<GetOrdersByOrderIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrdersByOrderIdResponses, GetOrdersByOrderIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/orders/{orderId}',
        ...options
    });
};

/**
 * Obtenir les commandes d'un formulaire
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>FormAdmin<br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
 */
export const getOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrders = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersResponses, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugOrdersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/orders',
        ...options
    });
};

/**
 * Obtenir les commandes d'une organisation
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
 */
export const getOrganizationsByOrganizationSlugOrders = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugOrdersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugOrdersResponses, GetOrganizationsByOrganizationSlugOrdersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/orders',
        ...options
    });
};

/**
 * Annuler les paiements futurs pour une commande (pas de remboursement).
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/>FormAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> RefundManagement<br/><br/>
 */
export const postOrdersByOrderIdCancel = <ThrowOnError extends boolean = false>(options: Options<PostOrdersByOrderIdCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrdersByOrderIdCancelResponses, PostOrdersByOrderIdCancelErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/orders/{orderId}/cancel',
        ...options
    });
};

/**
 * Obtenir la structure juridique d'une organisation visible.
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> OrganizationAdministration<br/><br/>
 */
export const getOrganizationsLegalInformationsLegalStructures = <ThrowOnError extends boolean = false>(options?: Options<GetOrganizationsLegalInformationsLegalStructuresData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOrganizationsLegalInformationsLegalStructuresResponses, GetOrganizationsLegalInformationsLegalStructuresErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/legal-informations/legal-structures',
        ...options
    });
};

/**
 * Obtenir les textes d'information fiscale de l'organisation.
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> OrganizationAdministration<br/><br/>
 */
export const getOrganizationsLegalInformationsTaxInformationTexts = <ThrowOnError extends boolean = false>(options?: Options<GetOrganizationsLegalInformationsTaxInformationTextsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOrganizationsLegalInformationsTaxInformationTextsResponses, GetOrganizationsLegalInformationsTaxInformationTextsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/legal-informations/tax-information-texts',
        ...options
    });
};

/**
 * Obtenir la configuration des informations juridiques de l'organisation.
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> OrganizationAdministration<br/><br/>
 */
export const getOrganizationsLegalInformationsByOrganizationSlugConfiguration = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsLegalInformationsByOrganizationSlugConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsLegalInformationsByOrganizationSlugConfigurationResponses, GetOrganizationsLegalInformationsByOrganizationSlugConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/legal-informations/{organizationSlug}/configuration',
        ...options
    });
};

/**
 * Mettre à jour la configuration des informations juridiques de l'organisation.
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> OrganizationAdministration<br/><br/>
 */
export const putOrganizationsLegalInformationsByOrganizationSlugConfiguration = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationsLegalInformationsByOrganizationSlugConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutOrganizationsLegalInformationsByOrganizationSlugConfigurationResponses, PutOrganizationsLegalInformationsByOrganizationSlugConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/legal-informations/{organizationSlug}/configuration',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options.headers
        }
    });
};

/**
 * Obtenir le détail d'une organisation
 * Obtenir les informations publiques de l'organisation spécifiée.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const getOrganizationsByOrganizationSlug = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugResponses, GetOrganizationsByOrganizationSlugErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}',
        ...options
    });
};

/**
 * Mise à jour du domaine
 * <br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const putPartnersMeApiClients = <ThrowOnError extends boolean = false>(options?: Options<PutPartnersMeApiClientsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutPartnersMeApiClientsResponses, PutPartnersMeApiClientsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/partners/me/api-clients',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Suppression d'une URL de notification liée à une organisation
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const deletePartnersMeApiNotificationsOrganizationsByOrganizationSlug = <ThrowOnError extends boolean = false>(options: Options<DeletePartnersMeApiNotificationsOrganizationsByOrganizationSlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePartnersMeApiNotificationsOrganizationsByOrganizationSlugResponses, DeletePartnersMeApiNotificationsOrganizationsByOrganizationSlugErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/partners/me/api-notifications/organizations/{organizationSlug}',
        ...options
    });
};

/**
 * Mise à jour d'une URL de notification liée à une organisation
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const putPartnersMeApiNotificationsOrganizationsByOrganizationSlug = <ThrowOnError extends boolean = false>(options: Options<PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugResponses, PutPartnersMeApiNotificationsOrganizationsByOrganizationSlugErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/partners/me/api-notifications/organizations/{organizationSlug}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options.headers
        }
    });
};

/**
 * Suppression de l'URL de notification principale
 * <br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const deletePartnersMeApiNotifications = <ThrowOnError extends boolean = false>(options?: Options<DeletePartnersMeApiNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeletePartnersMeApiNotificationsResponses, DeletePartnersMeApiNotificationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/partners/me/api-notifications',
        ...options
    });
};

/**
 * Mise à jour de l'URL de notification principale
 * <br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const putPartnersMeApiNotifications = <ThrowOnError extends boolean = false>(options?: Options<PutPartnersMeApiNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutPartnersMeApiNotificationsResponses, PutPartnersMeApiNotificationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/partners/me/api-notifications',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers
        }
    });
};

/**
 * Récupération des informations
 * <br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const getPartnersMe = <ThrowOnError extends boolean = false>(options?: Options<GetPartnersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPartnersMeResponses, GetPartnersMeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/partners/me',
        ...options
    });
};

/**
 * Obtenir toutes les organisations
 * Liste toutes les organisations liées au partenaire. Les résultats sont classés par date de mise à jour de la visibilité API en ordre croissant. Le nombre total de résultats (ou de pages) n'est pas récupérable, donc les informations de pagination retournées indiqueront toujours -1.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const getPartnersMeOrganizations = <ThrowOnError extends boolean = false>(options?: Options<GetPartnersMeOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPartnersMeOrganizationsResponses, GetPartnersMeOrganizationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/partners/me/organizations',
        ...options
    });
};

/**
 * Obtenir les informations détaillées d'un paiement.
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>FormAdmin<br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
 */
export const getPaymentsByPaymentId = <ThrowOnError extends boolean = false>(options: Options<GetPaymentsByPaymentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPaymentsByPaymentIdResponses, GetPaymentsByPaymentIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/payments/{paymentId}',
        ...options
    });
};

/**
 * Obtenir les informations des paiements effectués sur un formulaire
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>FormAdmin<br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
 */
export const getOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPayments = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsResponses, GetOrganizationsByOrganizationSlugFormsByFormTypeByFormSlugPaymentsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/forms/{formType}/{formSlug}/payments',
        ...options
    });
};

/**
 * Obtenir les informations des paiements effectués sur une organisation
 * Retourne la liste des paiements selon les paramètres<br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessTransactions<br/><br/>
 */
export const getOrganizationsByOrganizationSlugPayments = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugPaymentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugPaymentsResponses, GetOrganizationsByOrganizationSlugPaymentsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/payments',
        ...options
    });
};

/**
 * Rembourser un paiement.
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/>FormAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> RefundManagement<br/><br/>
 */
export const postPaymentsByPaymentIdRefund = <ThrowOnError extends boolean = false>(options: Options<PostPaymentsByPaymentIdRefundData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPaymentsByPaymentIdRefundResponses, PostPaymentsByPaymentIdRefundErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/payments/{paymentId}/refund',
        ...options
    });
};

/**
 * Rechercher des paiements.
 * <p>Attention : Le compte total est désactivé, nous retournons la liste des paiements et le continuationToken. </p><p>Recherchez des paiements basés sur de nombreux critères La recherche doit utiliser au moins l'un des paramètres suivants : </p><ul><li>ID de l'organisation : paiements effectués pour cette organisation </li><li>Formulaire : Paiements effectués par ce formulaire en utilisant le couple ID du formulaire et type du formulaire </li><li>ID de l'utilisateur : Paiements effectués par cet utilisateur </li><li>États : Une liste d'états de paiement à filtrer. (si vide, tous les paiements seront retournés)</li><li>Plage de dates : En utilisant du et/ou au </li><li>Requête de recherche : Une liste de mots qui doivent être contenus soit sur les noms des payeurs ou des utilisateurs ou l'email </li><li>Montant du paiement : En centimes, qui doit exactement correspondre au montant des paiements (avec ou sans la contribution) </li></ul><p>L'ordre des résultats est également personnalisable : </p><ul><li>Le champ de tri peut être la date, la date de mise à jour ou la date de création </li><li>L'ordre peut être ascendant ou descendant<br><br><b>Votre token doit avoir l'un de ces rôles : </b><br>OrganizationAdmin<br><br>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br><br><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br> AccessTransactions<br><br></li></ul>
 */
export const getOrganizationsByOrganizationSlugPaymentsSearch = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugPaymentsSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugPaymentsSearchResponses, GetOrganizationsByOrganizationSlugPaymentsSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/payments/search',
        ...options
    });
};

/**
 * Obtenir le détail d'un tag interne
 * <br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> FormOpenDirectory<br/><br/>
 */
export const getTagsByTagName = <ThrowOnError extends boolean = false>(options: Options<GetTagsByTagNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagsByTagNameResponses, GetTagsByTagNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tagName}',
        ...options
    });
};

/**
 * Mettre à jour l'émetteur des reçus fiscaux
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/>FormAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> RefundManagement<br/><br/>
 */
export const putOrganizationsByOrganizationSlugTaxReceiptFiscalReceiptTransmitter = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationsByOrganizationSlugTaxReceiptFiscalReceiptTransmitterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutOrganizationsByOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponses, PutOrganizationsByOrganizationSlugTaxReceiptFiscalReceiptTransmitterErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/tax-receipt/fiscal-receipt-transmitter',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options.headers
        }
    });
};

/**
 * Obtenir la configuration des reçus fiscaux
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/>FormAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> RefundManagement<br/><br/>
 */
export const getOrganizationsByOrganizationSlugTaxReceiptConfiguration = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByOrganizationSlugTaxReceiptConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationsByOrganizationSlugTaxReceiptConfigurationResponses, GetOrganizationsByOrganizationSlugTaxReceiptConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/tax-receipt/configuration',
        ...options
    });
};

/**
 * Mettre à jour la configuration des reçus fiscaux
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/>FormAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> RefundManagement<br/><br/>
 */
export const putOrganizationsByOrganizationSlugTaxReceiptConfiguration = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationsByOrganizationSlugTaxReceiptConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutOrganizationsByOrganizationSlugTaxReceiptConfigurationResponses, PutOrganizationsByOrganizationSlugTaxReceiptConfigurationErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/tax-receipt/configuration',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Prévisualiser les reçus fiscaux
 * <br/><br/><b>Votre token doit avoir l'un de ces rôles : </b><br/>OrganizationAdmin<br/>FormAdmin<br/><br/>Si vous êtes une <b>association</b>, vous pouvez obtenir ces rôles avec votre client.<br/>Si vous êtes un <b>partenaire</b>, vous pouvez obtenir ces rôles par le flux d'autorisation.<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> RefundManagement<br/><br/>
 */
export const postOrganizationsByOrganizationSlugTaxReceiptPreview = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsByOrganizationSlugTaxReceiptPreviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostOrganizationsByOrganizationSlugTaxReceiptPreviewResponses, PostOrganizationsByOrganizationSlugTaxReceiptPreviewErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/organizations/{organizationSlug}/tax-receipt/preview',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Obtenir mes organisations
 * Renvoie la liste des organisations où l'utilisateur connecté a des droits<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const getUsersMeOrganizations = <ThrowOnError extends boolean = false>(options?: Options<GetUsersMeOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersMeOrganizationsResponses, GetUsersMeOrganizationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/organizations',
        ...options
    });
};

/**
 * Obtenir la liste des catégories du JO
 * Utilisez ceci afin de construire votre liste de catégories d'organisation<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const getValuesOrganizationCategories = <ThrowOnError extends boolean = false>(options?: Options<GetValuesOrganizationCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetValuesOrganizationCategoriesResponses, GetValuesOrganizationCategoriesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/values/organization/categories',
        ...options
    });
};

/**
 * Obtenir la liste des tags publiques
 * Utilisez ceci afin de récupérer la liste des étiquettes utilisées<br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const getValuesTags = <ThrowOnError extends boolean = false>(options?: Options<GetValuesTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetValuesTagsResponses, GetValuesTagsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/values/tags',
        ...options
    });
};

/**
 * Obtenir la liste des statuts juridiques
 * <br/><br/><b>Votre clientId doit être autorisé à tous ces privilèges : </b> <br/> AccessPublicData<br/><br/>
 */
export const getValuesCompanyLegalStatus = <ThrowOnError extends boolean = false>(options?: Options<GetValuesCompanyLegalStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetValuesCompanyLegalStatusResponses, GetValuesCompanyLegalStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/values/company-legal-status',
        ...options
    });
};