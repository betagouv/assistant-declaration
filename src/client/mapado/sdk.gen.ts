// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import type { GetAvailableSeatCollectionData, GetAvailableSeatCollectionResponse, PutBulkAvailableSeatCollectionData, PutBulkAvailableSeatCollectionResponse, GetAvailableSeatItemData, GetAvailableSeatItemResponse, PutAvailableSeatItemData, PutAvailableSeatItemResponse, GetBookingCollectionData, GetBookingCollectionResponse, GetBookingItemData, GetBookingItemResponse, GetCartCollectionData, GetCartCollectionResponse, PostCartCollectionData, PostCartCollectionResponse, NotifyOptionsCartCollectionData, NotifyOptionsCartCollectionResponse, DeleteCartItemData, DeleteCartItemResponse, GetCartItemData, GetCartItemResponse, PutCartItemData, PutCartItemResponse, GetProviderExportedCartDefaultDataCartItemData, GetProviderExportedCartDefaultDataCartItemResponse, ToggleVisibilityCartActionData, ToggleVisibilityCartActionResponse, GetCustomerCollectionData, GetCustomerCollectionResponse, PostCustomerCollectionData, PostCustomerCollectionResponse, BulkUpdateCustomerCollectionData, BulkUpdateCustomerCollectionResponse, GetCustomerItemData, GetCustomerItemResponse, PutCustomerItemData, PutCustomerItemResponse, GetEventDateCollectionData, GetEventDateCollectionResponse, PostEventDateCollectionData, PostEventDateCollectionResponse, DeleteEventDateItemData, DeleteEventDateItemResponse, GetEventDateItemData, GetEventDateItemResponse, PutEventDateItemData, PutEventDateItemResponse, PutBulkEventDateItemData, PutBulkEventDateItemResponse, EventDateCancelEventDateItemData, EventDateCancelEventDateItemResponse, EventDateCloneEventDateCollectionData, EventDateCloneEventDateCollectionResponse, FindOneForSellingDeviceTypeEventDateItemData, FindOneForSellingDeviceTypeEventDateItemResponse, GetMinisiteCollectionData, GetMinisiteCollectionResponse, PostMinisiteCollectionData, PostMinisiteCollectionResponse, DeleteMinisiteItemData, DeleteMinisiteItemResponse, GetMinisiteItemData, GetMinisiteItemResponse, PutMinisiteItemData, PutMinisiteItemResponse, GetOrderCollectionData, GetOrderCollectionResponse, PostOrderCollectionData, PostOrderCollectionResponse, GetOrderItemData, GetOrderItemResponse, PutOrderItemData, PutOrderItemResponse, CouponsPdfOrderItemData, CouponsPdfOrderItemResponse, GeneratePaymentProviderDataOrderItemData, GeneratePaymentProviderDataOrderItemResponse, ProviderInformationsOrderItemData, ProviderInformationsOrderItemResponse, PaymentCallbackOrderCollectionData, PaymentCallbackOrderCollectionResponse, RescheduleOrderItemData, RescheduleOrderItemResponse, ScanOrderItemData, ScanOrderItemResponse, SendCouponsByMailOrderCollectionData, SendCouponsByMailOrderCollectionResponse, SendTicketsCouponsByMailOrderCollectionData, SendTicketsCouponsByMailOrderCollectionResponse, UnscanOrderItemData, UnscanOrderItemResponse, GetPaymentCollectionData, GetPaymentCollectionResponse, PostPaymentCollectionData, PostPaymentCollectionResponse, GetPaymentItemData, GetPaymentItemResponse, PutPaymentItemData, PutPaymentItemResponse, PutMetadataPaymentItemData, PutMetadataPaymentItemResponse, GetRefundCollectionData, GetRefundCollectionResponse, PostRefundCollectionData, PostRefundCollectionResponse, GetRefundItemData, GetRefundItemResponse, PutRefundItemData, PutRefundItemResponse, GetScanCollectionData, GetScanCollectionResponse, GetSeasonCollectionData, GetSeasonCollectionResponse, PostSeasonCollectionData, PostSeasonCollectionResponse, DeleteSeasonItemData, DeleteSeasonItemResponse, GetSeasonItemData, GetSeasonItemResponse, PutSeasonItemData, PutSeasonItemResponse, GetSeatCollectionData, GetSeatCollectionResponse, PostSeatCollectionData, PostSeatCollectionResponse, GetSeatItemData, GetSeatItemResponse, PutSeatItemData, PutSeatItemResponse, GetTicketPriceGroupCollectionData, GetTicketPriceGroupCollectionResponse, PostTicketPriceGroupCollectionData, PostTicketPriceGroupCollectionResponse, DeleteTicketPriceGroupItemData, DeleteTicketPriceGroupItemResponse, GetTicketPriceGroupItemData, GetTicketPriceGroupItemResponse, PutTicketPriceGroupItemData, PutTicketPriceGroupItemResponse, ToggleVisibilityTicketPriceGroupActionData, ToggleVisibilityTicketPriceGroupActionResponse, GetTicketPriceCollectionData, GetTicketPriceCollectionResponse, PostTicketPriceCollectionData, PostTicketPriceCollectionResponse, CheckVatRateTicketPriceCollectionData, CheckVatRateTicketPriceCollectionResponse, FrequentlyUsedTicketPriceCollectionData, FrequentlyUsedTicketPriceCollectionResponse, DeleteTicketPriceItemData, DeleteTicketPriceItemResponse, GetTicketPriceItemData, GetTicketPriceItemResponse, PutTicketPriceItemData, PutTicketPriceItemResponse, CheckVatRateForTicketPriceTicketPriceItemData, CheckVatRateForTicketPriceTicketPriceItemResponse, CloneTicketPriceCollectionData, CloneTicketPriceCollectionResponse, ToggleVisibilityTicketPriceActionData, ToggleVisibilityTicketPriceActionResponse, GetTicketingCategoryCollectionData, GetTicketingCategoryCollectionResponse, PostTicketingCategoryCollectionData, PostTicketingCategoryCollectionResponse, DeleteTicketingCategoryItemData, DeleteTicketingCategoryItemResponse, GetTicketingCategoryItemData, GetTicketingCategoryItemResponse, PutTicketingCategoryItemData, PutTicketingCategoryItemResponse, GetTicketingCollectionData, GetTicketingCollectionResponse, PostTicketingCollectionData, PostTicketingCollectionResponse, DeleteTicketingItemData, DeleteTicketingItemResponse, GetTicketingItemData, GetTicketingItemResponse, PutTicketingItemData, PutTicketingItemResponse, CloseSalesTicketingItemData, CloseSalesTicketingItemResponse, OpenSalesTicketingItemData, OpenSalesTicketingItemResponse, SuspendSalesTicketingItemData, SuspendSalesTicketingItemResponse, GetTicketCollectionData, GetTicketCollectionResponse, PostTicketCollectionData, PostTicketCollectionResponse, PostBarcodeScanCollectionData, PostBarcodeScanCollectionResponse, PutBulkTicketCollectionData, PutBulkTicketCollectionResponse, GetTicketItemData, GetTicketItemResponse, PutTicketItemData, PutTicketItemResponse, UnscanTicketItemData, UnscanTicketItemResponse, GetByTicketScanCollectionData, GetByTicketScanCollectionResponse, PostScanCollectionData, PostScanCollectionResponse, GetScanItemData, GetScanItemResponse, GetVenueCollectionData, GetVenueCollectionResponse, PostVenueCollectionData, PostVenueCollectionResponse, DeleteVenueItemData, DeleteVenueItemResponse, GetVenueItemData, GetVenueItemResponse, PutVenueItemData, PutVenueItemResponse, ToggleVisibilityVenueActionData, ToggleVisibilityVenueActionResponse, GetWalletCollectionData, GetWalletCollectionResponse, PostWalletCollectionData, PostWalletCollectionResponse, GetWalletItemData, GetWalletItemResponse, PutWalletItemData, PutWalletItemResponse, PutStripeAuthCodeWalletItemData, PutStripeAuthCodeWalletItemResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Retrieves the collection of AvailableSeat resources.
 * Retrieves the collection of AvailableSeat resources.
 */
export const getAvailableSeatCollection = <ThrowOnError extends boolean = false>(options?: Options<GetAvailableSeatCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAvailableSeatCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/available_seats',
        ...options
    });
};

/**
 * Bulk update available seat
 * Replaces the AvailableSeat resource.
 */
export const putBulkAvailableSeatCollection = <ThrowOnError extends boolean = false>(options: Options<PutBulkAvailableSeatCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutBulkAvailableSeatCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/available_seats/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a AvailableSeat resource.
 * Retrieves a AvailableSeat resource.
 */
export const getAvailableSeatItem = <ThrowOnError extends boolean = false>(options: Options<GetAvailableSeatItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAvailableSeatItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/available_seats/{id}',
        ...options
    });
};

/**
 * Replaces the AvailableSeat resource.
 * Replaces the AvailableSeat resource.
 */
export const putAvailableSeatItem = <ThrowOnError extends boolean = false>(options: Options<PutAvailableSeatItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutAvailableSeatItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/available_seats/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Booking resources.
 * Retrieves the collection of Booking resources.
 */
export const getBookingCollection = <ThrowOnError extends boolean = false>(options?: Options<GetBookingCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBookingCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/bookings',
        ...options
    });
};

/**
 * Retrieves a Booking resource.
 * Retrieves a Booking resource.
 */
export const getBookingItem = <ThrowOnError extends boolean = false>(options: Options<GetBookingItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBookingItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/bookings/{id}',
        ...options
    });
};

/**
 * Retrieves the collection of Cart resources.
 * Retrieves the collection of Cart resources.
 */
export const getCartCollection = <ThrowOnError extends boolean = false>(options?: Options<GetCartCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCartCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/carts',
        ...options
    });
};

/**
 * Creates a Cart resource.
 * Creates a Cart resource.
 */
export const postCartCollection = <ThrowOnError extends boolean = false>(options: Options<PostCartCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostCartCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/carts',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Notify options according to filters
 * Creates a Cart resource.
 */
export const notifyOptionsCartCollection = <ThrowOnError extends boolean = false>(options: Options<NotifyOptionsCartCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NotifyOptionsCartCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/carts/notify-options',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the Cart resource.
 * Removes the Cart resource.
 */
export const deleteCartItem = <ThrowOnError extends boolean = false>(options: Options<DeleteCartItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteCartItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/carts/{id}',
        ...options
    });
};

/**
 * Retrieves a Cart resource.
 * Retrieves a Cart resource.
 */
export const getCartItem = <ThrowOnError extends boolean = false>(options: Options<GetCartItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCartItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/carts/{id}',
        ...options
    });
};

/**
 * Replaces the Cart resource.
 * Replaces the Cart resource.
 */
export const putCartItem = <ThrowOnError extends boolean = false>(options: Options<PutCartItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutCartItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/carts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Cart resource.
 * Retrieves a Cart resource.
 */
export const getProviderExportedCartDefaultDataCartItem = <ThrowOnError extends boolean = false>(options: Options<GetProviderExportedCartDefaultDataCartItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProviderExportedCartDefaultDataCartItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/carts/{id}/provider_exported_cart/{providerName}',
        ...options
    });
};

/**
 * Toggle visibility of Cart resource
 * Toggle visibility of Cart resource
 */
export const toggleVisibilityCartAction = <ThrowOnError extends boolean = false>(options: Options<ToggleVisibilityCartActionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ToggleVisibilityCartActionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/carts/{id}/{action}',
        ...options
    });
};

/**
 * Retrieves the collection of Customer resources.
 * Retrieves the collection of Customer resources.
 */
export const getCustomerCollection = <ThrowOnError extends boolean = false>(options?: Options<GetCustomerCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCustomerCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/customers',
        ...options
    });
};

/**
 * Creates a Customer resource.
 * Creates a Customer resource.
 */
export const postCustomerCollection = <ThrowOnError extends boolean = false>(options: Options<PostCustomerCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostCustomerCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/customers',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Creates a Customer resource.
 * Creates a Customer resource.
 */
export const bulkUpdateCustomerCollection = <ThrowOnError extends boolean = false>(options: Options<BulkUpdateCustomerCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BulkUpdateCustomerCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/customers/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Customer resource.
 * Retrieves a Customer resource.
 */
export const getCustomerItem = <ThrowOnError extends boolean = false>(options: Options<GetCustomerItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCustomerItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/customers/{id}',
        ...options
    });
};

/**
 * Replaces the Customer resource.
 * Replaces the Customer resource.
 */
export const putCustomerItem = <ThrowOnError extends boolean = false>(options: Options<PutCustomerItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutCustomerItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/customers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of EventDate resources.
 * Retrieves the collection of EventDate resources.
 */
export const getEventDateCollection = <ThrowOnError extends boolean = false>(options?: Options<GetEventDateCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEventDateCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event_dates',
        ...options
    });
};

/**
 * Creates a EventDate resource.
 * Creates a EventDate resource.
 */
export const postEventDateCollection = <ThrowOnError extends boolean = false>(options: Options<PostEventDateCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostEventDateCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event_dates',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the EventDate resource.
 * Removes the EventDate resource.
 */
export const deleteEventDateItem = <ThrowOnError extends boolean = false>(options: Options<DeleteEventDateItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteEventDateItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event_dates/{id}',
        ...options
    });
};

/**
 * Retrieves a EventDate resource.
 * Retrieves a EventDate resource.
 */
export const getEventDateItem = <ThrowOnError extends boolean = false>(options: Options<GetEventDateItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEventDateItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event_dates/{id}',
        ...options
    });
};

/**
 * Replaces the EventDate resource.
 * Replaces the EventDate resource.
 */
export const putEventDateItem = <ThrowOnError extends boolean = false>(options: Options<PutEventDateItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutEventDateItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event_dates/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Bulk update event dates
 * Replaces the EventDate resource.
 */
export const putBulkEventDateItem = <ThrowOnError extends boolean = false>(options: Options<PutBulkEventDateItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutBulkEventDateItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event_dates/{id}/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Cancel event date.
 * Replaces the EventDate resource.
 */
export const eventDateCancelEventDateItem = <ThrowOnError extends boolean = false>(options: Options<EventDateCancelEventDateItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<EventDateCancelEventDateItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event_dates/{id}/cancel',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Clone event date
 * Creates a EventDate resource.
 */
export const eventDateCloneEventDateCollection = <ThrowOnError extends boolean = false>(options: Options<EventDateCloneEventDateCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EventDateCloneEventDateCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event_dates/{id}/clone',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Find EventDate by id and selling device type
 * Retrieves a EventDate resource.
 */
export const findOneForSellingDeviceTypeEventDateItem = <ThrowOnError extends boolean = false>(options: Options<FindOneForSellingDeviceTypeEventDateItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FindOneForSellingDeviceTypeEventDateItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event_dates/{id}/sellingDeviceType/{sellingDeviceType}',
        ...options
    });
};

/**
 * Retrieves the collection of Minisite resources.
 * Retrieves the collection of Minisite resources.
 */
export const getMinisiteCollection = <ThrowOnError extends boolean = false>(options?: Options<GetMinisiteCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMinisiteCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/minisites',
        ...options
    });
};

/**
 * Creates a Minisite resource.
 * Creates a Minisite resource.
 */
export const postMinisiteCollection = <ThrowOnError extends boolean = false>(options: Options<PostMinisiteCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMinisiteCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/minisites',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the Minisite resource.
 * Removes the Minisite resource.
 */
export const deleteMinisiteItem = <ThrowOnError extends boolean = false>(options: Options<DeleteMinisiteItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteMinisiteItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/minisites/{id}',
        ...options
    });
};

/**
 * Retrieves a Minisite resource.
 * Retrieves a Minisite resource.
 */
export const getMinisiteItem = <ThrowOnError extends boolean = false>(options: Options<GetMinisiteItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMinisiteItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/minisites/{id}',
        ...options
    });
};

/**
 * Replaces the Minisite resource.
 * Replaces the Minisite resource.
 */
export const putMinisiteItem = <ThrowOnError extends boolean = false>(options: Options<PutMinisiteItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutMinisiteItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/minisites/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Order resources.
 * Retrieves the collection of Order resources.
 */
export const getOrderCollection = <ThrowOnError extends boolean = false>(options?: Options<GetOrderCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOrderCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders',
        ...options
    });
};

/**
 * Creates a Order resource.
 * Creates a Order resource.
 */
export const postOrderCollection = <ThrowOnError extends boolean = false>(options: Options<PostOrderCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostOrderCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Order resource.
 * Retrieves a Order resource.
 */
export const getOrderItem = <ThrowOnError extends boolean = false>(options: Options<GetOrderItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOrderItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders/{id}',
        ...options
    });
};

/**
 * Replaces the Order resource.
 * Replaces the Order resource.
 */
export const putOrderItem = <ThrowOnError extends boolean = false>(options: Options<PutOrderItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutOrderItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Download order coupons
 * Retrieves a Order resource.
 */
export const couponsPdfOrderItem = <ThrowOnError extends boolean = false>(options: Options<CouponsPdfOrderItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CouponsPdfOrderItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders/{id}/coupons',
        ...options
    });
};

/**
 * Creates a Order resource.
 * Creates a Order resource.
 */
export const generatePaymentProviderDataOrderItem = <ThrowOnError extends boolean = false>(options: Options<GeneratePaymentProviderDataOrderItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GeneratePaymentProviderDataOrderItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders/{id}/generate-payment-provider-data',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Order resource.
 * Retrieves a Order resource.
 */
export const providerInformationsOrderItem = <ThrowOnError extends boolean = false>(options: Options<ProviderInformationsOrderItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProviderInformationsOrderItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders/{id}/payment-provider-information',
        ...options
    });
};

/**
 * Handle order payment callback
 * Creates a Order resource.
 */
export const paymentCallbackOrderCollection = <ThrowOnError extends boolean = false>(options: Options<PaymentCallbackOrderCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PaymentCallbackOrderCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders/{id}/payment_callback',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Creates a Order resource.
 * Creates a Order resource.
 */
export const rescheduleOrderItem = <ThrowOnError extends boolean = false>(options: Options<RescheduleOrderItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RescheduleOrderItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders/{id}/reschedule',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Scan an order
 * Creates a Order resource.
 */
export const scanOrderItem = <ThrowOnError extends boolean = false>(options: Options<ScanOrderItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ScanOrderItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders/{id}/scans',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Download order coupons
 * Creates a Order resource.
 */
export const sendCouponsByMailOrderCollection = <ThrowOnError extends boolean = false>(options: Options<SendCouponsByMailOrderCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SendCouponsByMailOrderCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders/{id}/send_coupons_by_mail',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Download order tickets & coupons
 * Creates a Order resource.
 */
export const sendTicketsCouponsByMailOrderCollection = <ThrowOnError extends boolean = false>(options: Options<SendTicketsCouponsByMailOrderCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SendTicketsCouponsByMailOrderCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders/{id}/send_tickets_coupons_by_mail',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Unscan an order
 * Creates a Order resource.
 */
export const unscanOrderItem = <ThrowOnError extends boolean = false>(options: Options<UnscanOrderItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UnscanOrderItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/orders/{id}/unscan',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Payment resources.
 * Retrieves the collection of Payment resources.
 */
export const getPaymentCollection = <ThrowOnError extends boolean = false>(options?: Options<GetPaymentCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPaymentCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/payments',
        ...options
    });
};

/**
 * Creates a Payment resource.
 * Creates a Payment resource.
 */
export const postPaymentCollection = <ThrowOnError extends boolean = false>(options: Options<PostPaymentCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPaymentCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/payments',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Payment resource.
 * Retrieves a Payment resource.
 */
export const getPaymentItem = <ThrowOnError extends boolean = false>(options: Options<GetPaymentItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPaymentItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/payments/{id}',
        ...options
    });
};

/**
 * Replaces the Payment resource.
 * Replaces the Payment resource.
 */
export const putPaymentItem = <ThrowOnError extends boolean = false>(options: Options<PutPaymentItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutPaymentItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/payments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Set the payment metadata for the payment
 * Replaces the Payment resource.
 */
export const putMetadataPaymentItem = <ThrowOnError extends boolean = false>(options: Options<PutMetadataPaymentItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutMetadataPaymentItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/payments/{id}/provider-metadata',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Refund resources.
 * Retrieves the collection of Refund resources.
 */
export const getRefundCollection = <ThrowOnError extends boolean = false>(options?: Options<GetRefundCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRefundCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/refunds',
        ...options
    });
};

/**
 * Creates a Refund resource.
 * Creates a Refund resource.
 */
export const postRefundCollection = <ThrowOnError extends boolean = false>(options: Options<PostRefundCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostRefundCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/refunds',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Refund resource.
 * Retrieves a Refund resource.
 */
export const getRefundItem = <ThrowOnError extends boolean = false>(options: Options<GetRefundItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRefundItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/refunds/{id}',
        ...options
    });
};

/**
 * Replaces the Refund resource.
 * Replaces the Refund resource.
 */
export const putRefundItem = <ThrowOnError extends boolean = false>(options: Options<PutRefundItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutRefundItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/refunds/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Scan resources.
 * Retrieves the collection of Scan resources.
 */
export const getScanCollection = <ThrowOnError extends boolean = false>(options?: Options<GetScanCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetScanCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/scans',
        ...options
    });
};

/**
 * Retrieves the collection of Season resources.
 * Retrieves the collection of Season resources.
 */
export const getSeasonCollection = <ThrowOnError extends boolean = false>(options?: Options<GetSeasonCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSeasonCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/seasons',
        ...options
    });
};

/**
 * Creates a Season resource.
 * Creates a Season resource.
 */
export const postSeasonCollection = <ThrowOnError extends boolean = false>(options: Options<PostSeasonCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSeasonCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/seasons',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the Season resource.
 * Removes the Season resource.
 */
export const deleteSeasonItem = <ThrowOnError extends boolean = false>(options: Options<DeleteSeasonItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteSeasonItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/seasons/{id}',
        ...options
    });
};

/**
 * Retrieves a Season resource.
 * Retrieves a Season resource.
 */
export const getSeasonItem = <ThrowOnError extends boolean = false>(options: Options<GetSeasonItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSeasonItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/seasons/{id}',
        ...options
    });
};

/**
 * Replaces the Season resource.
 * Replaces the Season resource.
 */
export const putSeasonItem = <ThrowOnError extends boolean = false>(options: Options<PutSeasonItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutSeasonItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/seasons/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Seat resources.
 * Retrieves the collection of Seat resources.
 */
export const getSeatCollection = <ThrowOnError extends boolean = false>(options?: Options<GetSeatCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSeatCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/seats',
        ...options
    });
};

/**
 * Creates a Seat resource.
 * Creates a Seat resource.
 */
export const postSeatCollection = <ThrowOnError extends boolean = false>(options: Options<PostSeatCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSeatCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/seats',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Seat resource.
 * Retrieves a Seat resource.
 */
export const getSeatItem = <ThrowOnError extends boolean = false>(options: Options<GetSeatItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSeatItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/seats/{id}',
        ...options
    });
};

/**
 * Replaces the Seat resource.
 * Replaces the Seat resource.
 */
export const putSeatItem = <ThrowOnError extends boolean = false>(options: Options<PutSeatItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutSeatItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/seats/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of TicketPriceGroup resources.
 * Retrieves the collection of TicketPriceGroup resources.
 */
export const getTicketPriceGroupCollection = <ThrowOnError extends boolean = false>(options?: Options<GetTicketPriceGroupCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTicketPriceGroupCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_price_groups',
        ...options
    });
};

/**
 * Creates a TicketPriceGroup resource.
 * Creates a TicketPriceGroup resource.
 */
export const postTicketPriceGroupCollection = <ThrowOnError extends boolean = false>(options: Options<PostTicketPriceGroupCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTicketPriceGroupCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_price_groups',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the TicketPriceGroup resource.
 * Removes the TicketPriceGroup resource.
 */
export const deleteTicketPriceGroupItem = <ThrowOnError extends boolean = false>(options: Options<DeleteTicketPriceGroupItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteTicketPriceGroupItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_price_groups/{id}',
        ...options
    });
};

/**
 * Retrieves a TicketPriceGroup resource.
 * Retrieves a TicketPriceGroup resource.
 */
export const getTicketPriceGroupItem = <ThrowOnError extends boolean = false>(options: Options<GetTicketPriceGroupItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTicketPriceGroupItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_price_groups/{id}',
        ...options
    });
};

/**
 * Replaces the TicketPriceGroup resource.
 * Replaces the TicketPriceGroup resource.
 */
export const putTicketPriceGroupItem = <ThrowOnError extends boolean = false>(options: Options<PutTicketPriceGroupItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutTicketPriceGroupItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_price_groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Toggle visibility of TicketPriceGroup resource
 * Toggle visibility of TicketPriceGroup resource
 */
export const toggleVisibilityTicketPriceGroupAction = <ThrowOnError extends boolean = false>(options: Options<ToggleVisibilityTicketPriceGroupActionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ToggleVisibilityTicketPriceGroupActionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_price_groups/{id}/{action}',
        ...options
    });
};

/**
 * Retrieves the collection of TicketPrice resources.
 * Retrieves the collection of TicketPrice resources.
 */
export const getTicketPriceCollection = <ThrowOnError extends boolean = false>(options?: Options<GetTicketPriceCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTicketPriceCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_prices',
        ...options
    });
};

/**
 * Creates a TicketPrice resource.
 * Creates a TicketPrice resource.
 */
export const postTicketPriceCollection = <ThrowOnError extends boolean = false>(options: Options<PostTicketPriceCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTicketPriceCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_prices',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Check if the vat rate is similar to other ticket prices
 * Creates a TicketPrice resource.
 */
export const checkVatRateTicketPriceCollection = <ThrowOnError extends boolean = false>(options: Options<CheckVatRateTicketPriceCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CheckVatRateTicketPriceCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_prices/check-vat-rate',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Get the frequently used ticket prices
 * Retrieves the collection of TicketPrice resources.
 */
export const frequentlyUsedTicketPriceCollection = <ThrowOnError extends boolean = false>(options?: Options<FrequentlyUsedTicketPriceCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FrequentlyUsedTicketPriceCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_prices/frequently-used',
        ...options
    });
};

/**
 * Removes the TicketPrice resource.
 * Removes the TicketPrice resource.
 */
export const deleteTicketPriceItem = <ThrowOnError extends boolean = false>(options: Options<DeleteTicketPriceItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteTicketPriceItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_prices/{id}',
        ...options
    });
};

/**
 * Retrieves a TicketPrice resource.
 * Retrieves a TicketPrice resource.
 */
export const getTicketPriceItem = <ThrowOnError extends boolean = false>(options: Options<GetTicketPriceItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTicketPriceItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_prices/{id}',
        ...options
    });
};

/**
 * Replaces the TicketPrice resource.
 * Replaces the TicketPrice resource.
 */
export const putTicketPriceItem = <ThrowOnError extends boolean = false>(options: Options<PutTicketPriceItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutTicketPriceItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_prices/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Replaces the TicketPrice resource.
 * Replaces the TicketPrice resource.
 */
export const checkVatRateForTicketPriceTicketPriceItem = <ThrowOnError extends boolean = false>(options: Options<CheckVatRateForTicketPriceTicketPriceItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<CheckVatRateForTicketPriceTicketPriceItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_prices/{id}/check-vat-rate',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Clone another ticket price
 * Creates a TicketPrice resource.
 */
export const cloneTicketPriceCollection = <ThrowOnError extends boolean = false>(options: Options<CloneTicketPriceCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CloneTicketPriceCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_prices/{id}/clone',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Toggle visibility of TicketPrice resource
 * Toggle visibility of TicketPrice resource
 */
export const toggleVisibilityTicketPriceAction = <ThrowOnError extends boolean = false>(options: Options<ToggleVisibilityTicketPriceActionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ToggleVisibilityTicketPriceActionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticket_prices/{id}/{action}',
        ...options
    });
};

/**
 * Retrieves the collection of TicketingCategory resources.
 * Retrieves the collection of TicketingCategory resources.
 */
export const getTicketingCategoryCollection = <ThrowOnError extends boolean = false>(options?: Options<GetTicketingCategoryCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTicketingCategoryCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketing_categories',
        ...options
    });
};

/**
 * Creates a TicketingCategory resource.
 * Creates a TicketingCategory resource.
 */
export const postTicketingCategoryCollection = <ThrowOnError extends boolean = false>(options: Options<PostTicketingCategoryCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTicketingCategoryCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketing_categories',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the TicketingCategory resource.
 * Removes the TicketingCategory resource.
 */
export const deleteTicketingCategoryItem = <ThrowOnError extends boolean = false>(options: Options<DeleteTicketingCategoryItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteTicketingCategoryItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketing_categories/{id}',
        ...options
    });
};

/**
 * Retrieves a TicketingCategory resource.
 * Retrieves a TicketingCategory resource.
 */
export const getTicketingCategoryItem = <ThrowOnError extends boolean = false>(options: Options<GetTicketingCategoryItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTicketingCategoryItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketing_categories/{id}',
        ...options
    });
};

/**
 * Replaces the TicketingCategory resource.
 * Replaces the TicketingCategory resource.
 */
export const putTicketingCategoryItem = <ThrowOnError extends boolean = false>(options: Options<PutTicketingCategoryItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutTicketingCategoryItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketing_categories/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Ticketing resources.
 * Retrieves the collection of Ticketing resources.
 */
export const getTicketingCollection = <ThrowOnError extends boolean = false>(options?: Options<GetTicketingCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTicketingCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketings',
        ...options
    });
};

/**
 * Creates a Ticketing resource.
 * Creates a Ticketing resource.
 */
export const postTicketingCollection = <ThrowOnError extends boolean = false>(options: Options<PostTicketingCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTicketingCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketings',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the Ticketing resource.
 * Removes the Ticketing resource.
 */
export const deleteTicketingItem = <ThrowOnError extends boolean = false>(options: Options<DeleteTicketingItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteTicketingItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketings/{id}',
        ...options
    });
};

/**
 * Retrieves a Ticketing resource.
 * Retrieves a Ticketing resource.
 */
export const getTicketingItem = <ThrowOnError extends boolean = false>(options: Options<GetTicketingItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTicketingItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketings/{id}',
        ...options
    });
};

/**
 * Replaces the Ticketing resource.
 * Replaces the Ticketing resource.
 */
export const putTicketingItem = <ThrowOnError extends boolean = false>(options: Options<PutTicketingItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutTicketingItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketings/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Close sales for ticketing
 * Creates a Ticketing resource.
 */
export const closeSalesTicketingItem = <ThrowOnError extends boolean = false>(options: Options<CloseSalesTicketingItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CloseSalesTicketingItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketings/{id}/close-sales',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Open sales for ticketing
 * Creates a Ticketing resource.
 */
export const openSalesTicketingItem = <ThrowOnError extends boolean = false>(options: Options<OpenSalesTicketingItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<OpenSalesTicketingItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketings/{id}/open-sales',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Suspend sales for ticketing
 * Creates a Ticketing resource.
 */
export const suspendSalesTicketingItem = <ThrowOnError extends boolean = false>(options: Options<SuspendSalesTicketingItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SuspendSalesTicketingItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ticketings/{id}/suspend-sales',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves the collection of Ticket resources.
 * Retrieves the collection of Ticket resources.
 */
export const getTicketCollection = <ThrowOnError extends boolean = false>(options?: Options<GetTicketCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTicketCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tickets',
        ...options
    });
};

/**
 * Creates a Ticket resource.
 * Creates a Ticket resource.
 */
export const postTicketCollection = <ThrowOnError extends boolean = false>(options: Options<PostTicketCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTicketCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tickets',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Create a scan from a barcode
 * Creates a Scan resource.
 */
export const postBarcodeScanCollection = <ThrowOnError extends boolean = false>(options: Options<PostBarcodeScanCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostBarcodeScanCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tickets/barcode/{barcode}/scans',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Bulk update tickets
 * Replaces the Ticket resource.
 */
export const putBulkTicketCollection = <ThrowOnError extends boolean = false>(options: Options<PutBulkTicketCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutBulkTicketCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tickets/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Ticket resource.
 * Retrieves a Ticket resource.
 */
export const getTicketItem = <ThrowOnError extends boolean = false>(options: Options<GetTicketItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTicketItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tickets/{id}',
        ...options
    });
};

/**
 * Replaces the Ticket resource.
 * Replaces the Ticket resource.
 */
export const putTicketItem = <ThrowOnError extends boolean = false>(options: Options<PutTicketItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutTicketItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tickets/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Unscan a ticket
 * Replaces the Ticket resource.
 */
export const unscanTicketItem = <ThrowOnError extends boolean = false>(options: Options<UnscanTicketItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UnscanTicketItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tickets/{id}/unscan',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retreive scans for a given ticket
 * Retrieves the collection of Scan resources.
 */
export const getByTicketScanCollection = <ThrowOnError extends boolean = false>(options?: Options<GetByTicketScanCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetByTicketScanCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tickets/{ticketId}/scans',
        ...options
    });
};

/**
 * Creates a Scan resource.
 * Creates a Scan resource.
 */
export const postScanCollection = <ThrowOnError extends boolean = false>(options: Options<PostScanCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostScanCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tickets/{ticketId}/scans',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Scan resource.
 * Retrieves a Scan resource.
 */
export const getScanItem = <ThrowOnError extends boolean = false>(options: Options<GetScanItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetScanItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/tickets/{ticketId}/scans/{id}',
        ...options
    });
};

/**
 * Retrieves the collection of Venue resources.
 * Retrieves the collection of Venue resources.
 */
export const getVenueCollection = <ThrowOnError extends boolean = false>(options?: Options<GetVenueCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVenueCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/venues',
        ...options
    });
};

/**
 * Creates a Venue resource.
 * Creates a Venue resource.
 */
export const postVenueCollection = <ThrowOnError extends boolean = false>(options: Options<PostVenueCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostVenueCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/venues',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Removes the Venue resource.
 * Removes the Venue resource.
 */
export const deleteVenueItem = <ThrowOnError extends boolean = false>(options: Options<DeleteVenueItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteVenueItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/venues/{id}',
        ...options
    });
};

/**
 * Retrieves a Venue resource.
 * Retrieves a Venue resource.
 */
export const getVenueItem = <ThrowOnError extends boolean = false>(options: Options<GetVenueItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVenueItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/venues/{id}',
        ...options
    });
};

/**
 * Replaces the Venue resource.
 * Replaces the Venue resource.
 */
export const putVenueItem = <ThrowOnError extends boolean = false>(options: Options<PutVenueItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutVenueItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/venues/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Toggle visibility of Venue resource
 * Toggle visibility of Venue resource
 */
export const toggleVisibilityVenueAction = <ThrowOnError extends boolean = false>(options: Options<ToggleVisibilityVenueActionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ToggleVisibilityVenueActionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/venues/{id}/{action}',
        ...options
    });
};

/**
 * Retrieves the collection of Wallet resources.
 * Retrieves the collection of Wallet resources.
 */
export const getWalletCollection = <ThrowOnError extends boolean = false>(options?: Options<GetWalletCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWalletCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/wallets',
        ...options
    });
};

/**
 * Creates a Wallet resource.
 * Creates a Wallet resource.
 */
export const postWalletCollection = <ThrowOnError extends boolean = false>(options: Options<PostWalletCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWalletCollectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/wallets',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Retrieves a Wallet resource.
 * Retrieves a Wallet resource.
 */
export const getWalletItem = <ThrowOnError extends boolean = false>(options: Options<GetWalletItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWalletItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/wallets/{id}',
        ...options
    });
};

/**
 * Replaces the Wallet resource.
 * Replaces the Wallet resource.
 */
export const putWalletItem = <ThrowOnError extends boolean = false>(options: Options<PutWalletItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutWalletItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/wallets/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};

/**
 * Update wallet with stripe auth code
 * Replaces the Wallet resource.
 */
export const putStripeAuthCodeWalletItem = <ThrowOnError extends boolean = false>(options: Options<PutStripeAuthCodeWalletItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutStripeAuthCodeWalletItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/wallets/{id}/stripe-auth-code/{auth_code}',
        ...options,
        headers: {
            'Content-Type': 'application/ld+json',
            ...options?.headers
        }
    });
};