// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import type { GetApiByStructureIdTicketByBarCodeByEventIdData, GetApiByStructureIdTicketByBarCodeByEventIdResponse, GetApiByStructureIdTicketByBarCodeByEventIdError, PutApiByStructureIdTicketByBarCodeByEventIdData, PutApiByStructureIdTicketByBarCodeByEventIdResponse, PutApiByStructureIdTicketByBarCodeByEventIdError, GetApiByStructureIdBasketByLangCodeByBasketIdData, GetApiByStructureIdBasketByLangCodeByBasketIdResponse, PostApiByStructureIdAddBasketByLangCodeByBpLoginByBpPasswordData, PostApiByStructureIdAddBasketByLangCodeByBpLoginByBpPasswordResponse, PostApiByStructureIdSeatsFlagAutoData, PostApiByStructureIdSeatsFlagAutoResponse, PostApiByStructureIdSeatsFlagAutoError, DeleteApiByStructureIdSeatsFlagData, DeleteApiByStructureIdSeatsFlagResponse, DeleteApiByStructureIdSeatsFlagError, PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdData, PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdResponse, PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdError, GetApiByStructureIdScheduleByLangCodeByBpLoginByBpPasswordData, GetApiByStructureIdScheduleByLangCodeByBpLoginByBpPasswordResponse, GetApiByStructureIdScheduleByLangCodeByIdentiteIdData, GetApiByStructureIdScheduleByLangCodeByIdentiteIdResponse, GetApiByStructureIdScheduleByLangCodeData, GetApiByStructureIdScheduleByLangCodeResponse, GetApiByStructureIdScheduleByLangCodeDispoData, GetApiByStructureIdScheduleByLangCodeDispoResponse, GetApiByStructureIdEventsSessionsByLangCodeData, GetApiByStructureIdEventsSessionsByLangCodeResponse, GetApiByStructureIdEventsByEventIdImagesData, GetApiByStructureIdEventsByEventIdImagesResponse, GetApiByStructureIdEventsImagesData, GetApiByStructureIdEventsImagesResponse, GetApiExportGetExportByScriptNameData, GetApiExportGetExportByScriptNameResponse, PostApiExportGetExportByScriptNameData, PostApiExportGetExportByScriptNameResponse, GetApiByStructureIdIdentityData, GetApiByStructureIdIdentityResponse, GetApiByStructureIdIdentityError, PatchApiByStructureIdIdentityData, PatchApiByStructureIdIdentityResponse, PatchApiByStructureIdIdentityError, PostApiByStructureIdIdentityData, PostApiByStructureIdIdentityResponse, PostApiByStructureIdIdentityError, GetApiByStructureIdIdentitySalutationsData, GetApiByStructureIdIdentitySalutationsResponse, GetApiByStructureIdIdentitySalutationsError, GetApiByStructureIdIdentitySalutationsByLangIsoData, GetApiByStructureIdIdentitySalutationsByLangIsoResponse, GetApiByStructureIdIdentitySalutationsByLangIsoError, GetApiIdentityEncryptByPasswordData, GetApiIdentityEncryptByPasswordResponse, GetApiIdentityEncryptByPasswordError, GetApiByStructureIdOrderByOrderIdByBasketIdData, GetApiByStructureIdOrderByOrderIdByBasketIdResponse, GetApiByStructureIdOrderByOrderIdByBasketIdError, GetApiByStructureIdOrdersByBpLoginByBpPasswordData, GetApiByStructureIdOrdersByBpLoginByBpPasswordResponse, GetApiByStructureIdOrdersByBpLoginByBpPasswordError, DeleteApiByStructureIdOrderByOrderIdData, DeleteApiByStructureIdOrderByOrderIdResponse, DeleteApiByStructureIdOrderByOrderIdError, GetApiByStructureIdOrderByOrderIdData, GetApiByStructureIdOrderByOrderIdResponse, GetApiByStructureIdOrderByOrderIdError, PostApiByStructureIdOrderByBpLoginByBpPasswordData, PostApiByStructureIdOrderByBpLoginByBpPasswordResponse, PostApiByStructureIdOrderByBpLoginByBpPasswordError, PostApiByStructureIdOrderByBasketIdData, PostApiByStructureIdOrderByBasketIdResponse, PostApiByStructureIdOrderByBasketIdError, GetApiByStructureIdPlanBySessionIdData, GetApiByStructureIdPlanBySessionIdResponse, GetApiByStructureIdPlanBySessionIdAvailablesByIdentityIdByWebUserIdByBpLoginByBpPasswordData, GetApiByStructureIdPlanBySessionIdAvailablesByIdentityIdByWebUserIdByBpLoginByBpPasswordResponse, GetApiByStructureIdPlanBySessionIdTextsData, GetApiByStructureIdPlanBySessionIdTextsResponse, GetApiByStructureIdPlanBySessionIdByLangCodeCategoriesData, GetApiByStructureIdPlanBySessionIdByLangCodeCategoriesResponse, GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBuyerProfilIdData, GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBuyerProfilIdResponse, GetApiByStructureIdSessionsByEventIdByLangCodeData, GetApiByStructureIdSessionsByEventIdByLangCodeResponse, GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdData, GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdResponse, GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordData, GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponse, GetApiByStructureIdSessionsByEventIdBySessionIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordData, GetApiByStructureIdSessionsByEventIdBySessionIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponse, GetApiByStructureIdSessionsByEventIdByLangCodeByBpLoginByBpPasswordData, GetApiByStructureIdSessionsByEventIdByLangCodeByBpLoginByBpPasswordResponse, GetApiByStructureIdCurrencyData, GetApiByStructureIdCurrencyResponse, PostApiByStructureIdWebUserData, PostApiByStructureIdWebUserResponse, PostApiByStructureIdWebUserByBuyerProfilIdData, PostApiByStructureIdWebUserByBuyerProfilIdResponse, PostApiByStructureIdWebUserByBpLoginByBpPasswordData, PostApiByStructureIdWebUserByBpLoginByBpPasswordResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * check validity of bar code
 */
export const getApiByStructureIdTicketByBarCodeByEventId = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdTicketByBarCodeByEventIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdTicketByBarCodeByEventIdResponse, GetApiByStructureIdTicketByBarCodeByEventIdError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/ticket/{barCode}/{eventId}',
        ...options
    });
};

/**
 * update bar code
 */
export const putApiByStructureIdTicketByBarCodeByEventId = <ThrowOnError extends boolean = false>(options: Options<PutApiByStructureIdTicketByBarCodeByEventIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutApiByStructureIdTicketByBarCodeByEventIdResponse, PutApiByStructureIdTicketByBarCodeByEventIdError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/ticket/{barCode}/{eventId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiByStructureIdBasketByLangCodeByBasketId = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdBasketByLangCodeByBasketIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdBasketByLangCodeByBasketIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Basket/{langCode}/{basketId}',
        ...options
    });
};

/**
 * Add seats to basket of the internet user
 */
export const postApiByStructureIdAddBasketByLangCodeByBpLoginByBpPassword = <ThrowOnError extends boolean = false>(options: Options<PostApiByStructureIdAddBasketByLangCodeByBpLoginByBpPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiByStructureIdAddBasketByLangCodeByBpLoginByBpPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/AddBasket/{langCode}/{bpLogin}/{bpPassword}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * flag seats automatic according to the demand
 * Sample request:
 * flag 2 seats with rule 789 on session 567, category 9940001 for user 123
 *
 * POST api/994/SeatsFlag/auto
 * {
 * "webUserId": 123,
 * "listDemands": [
 * {
 * "sessionId": 567,
 * "categoryId": 9940001,
 * "listRules": [
 * {
 * "ruleId": 789,
 * "seatsCount": 2
 * }
 * ]
 * }
 * ]
 * }
 */
export const postApiByStructureIdSeatsFlagAuto = <ThrowOnError extends boolean = false>(options: Options<PostApiByStructureIdSeatsFlagAutoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiByStructureIdSeatsFlagAutoResponse, PostApiByStructureIdSeatsFlagAutoError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/SeatsFlag/auto',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * unflag seats
 */
export const deleteApiByStructureIdSeatsFlag = <ThrowOnError extends boolean = false>(options: Options<DeleteApiByStructureIdSeatsFlagData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteApiByStructureIdSeatsFlagResponse, DeleteApiByStructureIdSeatsFlagError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/SeatsFlag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Lie (=flague) les places au webUserId : reserv√©e pour 20 minutes
 */
export const postApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserId = <ThrowOnError extends boolean = false>(options: Options<PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdResponse, PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/SeatsFlag/plan/{eventId}/{sessionId}/{webUserId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * get schedule (events and sessions) for the buyer profil
 * Sample request:
 *
 * GET api/987/Schedule/fr/BP/PassW
 */
export const getApiByStructureIdScheduleByLangCodeByBpLoginByBpPassword = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdScheduleByLangCodeByBpLoginByBpPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdScheduleByLangCodeByBpLoginByBpPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Schedule/{langCode}/{bpLogin}/{bpPassword}',
        ...options
    });
};

/**
 * get schedule (events and sessions)
 * Sample request:
 *
 * GET api/987/Schedule/fr/123
 */
export const getApiByStructureIdScheduleByLangCodeByIdentiteId = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdScheduleByLangCodeByIdentiteIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdScheduleByLangCodeByIdentiteIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Schedule/{langCode}/{identiteId}',
        ...options
    });
};

/**
 * get schedule (events and sessions) general audience
 * Sample request:
 *
 * GET api/987/Schedule/fr
 */
export const getApiByStructureIdScheduleByLangCode = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdScheduleByLangCodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdScheduleByLangCodeResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Schedule/{langCode}',
        ...options
    });
};

/**
 * get schedule (events and sessions) general audience
 * Sample request:
 *
 * GET api/987/Schedule/fr/dispo
 */
export const getApiByStructureIdScheduleByLangCodeDispo = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdScheduleByLangCodeDispoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdScheduleByLangCodeDispoResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Schedule/{langCode}/dispo',
        ...options
    });
};

/**
 * get full schedule, prices do not matter
 * Sample request :
 *
 * curl -X 'GET' \
 * ' [url] /api/987/Events/Sessions/fr?startDate=2024-06-11&endDate=2025-06-11' \
 * -H 'accept: application/json' \
 * -H 'Authorization: Bearer eyJhbGciOiJIU_xxxxxxxxx_nFfgkT1L7DhzYO5bSsBxyPBVY'
 *
 * Sample parameters :
 *
 * get all events/sessions from now to now + 10 years:
 *
 * GET /Events/Sessions/fr
 *
 * OR
 * get all events/sessions between 2020-06-11 and 2025-06-11:
 *
 * GET /Events/Sessions/fr?startDate=2020-06-11TT12%3A00%3A00Z&endDate=2025-06-11TT12%3A00%3A00Z
 *
 * OR
 * get all events/sessions between 2020-06-11 and now + 10 years:
 *
 * GET /Events/Sessions/fr?startDate=2020-06-11T12%3A00%3A00Z
 *
 * OR
 * get all events/sessions between now and 2025-06-11 12:00:00:
 *
 * GET /Events/Sessions/fr?endDate=2025-06-11T12%3A00%3A00Z
 */
export const getApiByStructureIdEventsSessionsByLangCode = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdEventsSessionsByLangCodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdEventsSessionsByLangCodeResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Events/Sessions/{langCode}',
        ...options
    });
};

/**
 * get images of event (2 images)
 * Sample request:
 *
 * GET api/987/Events/123/images
 * GET api/987/Events/images
 */
export const getApiByStructureIdEventsByEventIdImages = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdEventsByEventIdImagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdEventsByEventIdImagesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Events/{eventId}/images',
        ...options
    });
};

/**
 * get images of event (2 images)
 * Sample request:
 *
 * GET api/987/Events/123/images
 * GET api/987/Events/images
 */
export const getApiByStructureIdEventsImages = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdEventsImagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdEventsImagesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Events/images',
        ...options
    });
};

/**
 * Get export data by script name
 * caching 15s
 */
export const getApiExportGetExportByScriptName = <ThrowOnError extends boolean = false>(options?: Options<GetApiExportGetExportByScriptNameData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiExportGetExportByScriptNameResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Export/GetExportByScriptName',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get export data by script name
 * caching 15s
 */
export const postApiExportGetExportByScriptName = <ThrowOnError extends boolean = false>(options?: Options<PostApiExportGetExportByScriptNameData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiExportGetExportByScriptNameResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Export/GetExportByScriptName',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * get identity via email / b64password
 * Sample requests:
 *
 * get identity account via password
 *
 * GET identity?email=pgautiedrigue.fr b64password=6e/pD3ksBVgmMDgPLOPr98ZQGyhORmUARKxjX9mlT8
 * {
 * }
 */
export const getApiByStructureIdIdentity = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdIdentityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdIdentityResponse, GetApiByStructureIdIdentityError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/identity',
        ...options
    });
};

/**
 * update identity via email / b64password
 * Sample requests:
 *
 * update identity account via password
 *
 * PATCH identity?email=pgautiedrigue.fr b64password=6e/pD3ksBVgmMDgPLOPr98ZQGyhORmUARKxjX9mlT8
 * {
 * }
 */
export const patchApiByStructureIdIdentity = <ThrowOnError extends boolean = false>(options: Options<PatchApiByStructureIdIdentityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<PatchApiByStructureIdIdentityResponse, PatchApiByStructureIdIdentityError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/identity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postApiByStructureIdIdentity = <ThrowOnError extends boolean = false>(options: Options<PostApiByStructureIdIdentityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiByStructureIdIdentityResponse, PostApiByStructureIdIdentityError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/identity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * get salutations list (mr, mme, etc)
 * Sample requests:
 *
 * get salutions list
 *
 * GET identity/salutations
 * {
 * }
 */
export const getApiByStructureIdIdentitySalutations = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdIdentitySalutationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdIdentitySalutationsResponse, GetApiByStructureIdIdentitySalutationsError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/identity/salutations',
        ...options
    });
};

/**
 * get salutations list (mr, mme, etc)
 * Sample requests:
 *
 * get salutions list
 *
 * GET identity/salutations
 * {
 * }
 */
export const getApiByStructureIdIdentitySalutationsByLangIso = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdIdentitySalutationsByLangIsoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdIdentitySalutationsByLangIsoResponse, GetApiByStructureIdIdentitySalutationsByLangIsoError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/identity/salutations/{langIso}',
        ...options
    });
};

/**
 * you should generate b64 password on your side. To check if you have to good algo
 * this method encrypt a string sha256 b64 (to generate a password)
 */
export const getApiIdentityEncryptByPassword = <ThrowOnError extends boolean = false>(options: Options<GetApiIdentityEncryptByPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiIdentityEncryptByPasswordResponse, GetApiIdentityEncryptByPasswordError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/identity/encrypt/{password}',
        ...options
    });
};

/**
 * get an order
 */
export const getApiByStructureIdOrderByOrderIdByBasketId = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdOrderByOrderIdByBasketIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdOrderByOrderIdByBasketIdResponse, GetApiByStructureIdOrderByOrderIdByBasketIdError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Order/{orderId}/{basketId}',
        ...options
    });
};

/**
 * get orders paid by buyerprofil
 */
export const getApiByStructureIdOrdersByBpLoginByBpPassword = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdOrdersByBpLoginByBpPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdOrdersByBpLoginByBpPasswordResponse, GetApiByStructureIdOrdersByBpLoginByBpPasswordError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Orders/{bpLogin}/{bpPassword}',
        ...options
    });
};

/**
 * cancel an order
 */
export const deleteApiByStructureIdOrderByOrderId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiByStructureIdOrderByOrderIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteApiByStructureIdOrderByOrderIdResponse, DeleteApiByStructureIdOrderByOrderIdError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Order/{orderId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * get an order
 */
export const getApiByStructureIdOrderByOrderId = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdOrderByOrderIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdOrderByOrderIdResponse, GetApiByStructureIdOrderByOrderIdError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Order/{orderId}',
        ...options
    });
};

/**
 * create order straightly from demand and pay it
 */
export const postApiByStructureIdOrderByBpLoginByBpPassword = <ThrowOnError extends boolean = false>(options: Options<PostApiByStructureIdOrderByBpLoginByBpPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiByStructureIdOrderByBpLoginByBpPasswordResponse, PostApiByStructureIdOrderByBpLoginByBpPasswordError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Order/{bpLogin}/{bpPassword}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * create order from a basket and pay it
 */
export const postApiByStructureIdOrderByBasketId = <ThrowOnError extends boolean = false>(options: Options<PostApiByStructureIdOrderByBasketIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiByStructureIdOrderByBasketIdResponse, PostApiByStructureIdOrderByBasketIdError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Order/{basketId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * get all seats of a session
 */
export const getApiByStructureIdPlanBySessionId = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdPlanBySessionIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdPlanBySessionIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Plan/{sessionId}',
        ...options
    });
};

/**
 * get seats
 */
export const getApiByStructureIdPlanBySessionIdAvailablesByIdentityIdByWebUserIdByBpLoginByBpPassword = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdPlanBySessionIdAvailablesByIdentityIdByWebUserIdByBpLoginByBpPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdPlanBySessionIdAvailablesByIdentityIdByWebUserIdByBpLoginByBpPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Plan/{sessionId}/availables/{identityId}/{webUserId}/{bpLogin}/{bpPassword}',
        ...options
    });
};

/**
 * get texts of a session
 */
export const getApiByStructureIdPlanBySessionIdTexts = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdPlanBySessionIdTextsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdPlanBySessionIdTextsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Plan/{sessionId}/texts',
        ...options
    });
};

/**
 * get categories of session
 */
export const getApiByStructureIdPlanBySessionIdByLangCodeCategories = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdPlanBySessionIdByLangCodeCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdPlanBySessionIdByLangCodeCategoriesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Plan/{sessionId}/{langCode}/categories',
        ...options
    });
};

/**
 * get price grid of the event, for a buyer profil / reseller
 */
export const getApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBuyerProfilId = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBuyerProfilIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBuyerProfilIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Sessions/{eventId}/{langCode}/{identityId}/{webUserId}/{buyerProfilId}',
        ...options
    });
};

/**
 * get price grid of the event for an identity
 */
export const getApiByStructureIdSessionsByEventIdByLangCode = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdSessionsByEventIdByLangCodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdSessionsByEventIdByLangCodeResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Sessions/{eventId}/{langCode}',
        ...options
    });
};

/**
 * get price grid of the event for an identity
 */
export const getApiByStructureIdSessionsByEventIdByLangCodeByIdentityId = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Sessions/{eventId}/{langCode}/{identityId}',
        ...options
    });
};

/**
 * get price grid of the event, for a buyer profil / reseller
 */
export const getApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPassword = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Sessions/{eventId}/{langCode}/{identityId}/{webUserId}/{bpLogin}/{bpPassword}',
        ...options
    });
};

export const getApiByStructureIdSessionsByEventIdBySessionIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPassword = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdSessionsByEventIdBySessionIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdSessionsByEventIdBySessionIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Sessions/{eventId}/{sessionId}/{langCode}/{identityId}/{webUserId}/{bpLogin}/{bpPassword}',
        ...options
    });
};

/**
 * get price grid of for a buyer profil / reseller
 * caching 60s
 */
export const getApiByStructureIdSessionsByEventIdByLangCodeByBpLoginByBpPassword = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdSessionsByEventIdByLangCodeByBpLoginByBpPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdSessionsByEventIdByLangCodeByBpLoginByBpPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Sessions/{eventId}/{langCode}/{bpLogin}/{bpPassword}',
        ...options
    });
};

/**
 * get the reference currency
 */
export const getApiByStructureIdCurrency = <ThrowOnError extends boolean = false>(options: Options<GetApiByStructureIdCurrencyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiByStructureIdCurrencyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/Currency',
        ...options
    });
};

/**
 * creation of an internet user / public sells
 */
export const postApiByStructureIdWebUser = <ThrowOnError extends boolean = false>(options: Options<PostApiByStructureIdWebUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiByStructureIdWebUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/WebUser',
        ...options
    });
};

/**
 * creation of an internet user for a buyer profil id
 */
export const postApiByStructureIdWebUserByBuyerProfilId = <ThrowOnError extends boolean = false>(options: Options<PostApiByStructureIdWebUserByBuyerProfilIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiByStructureIdWebUserByBuyerProfilIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/WebUser/{buyerProfilId}',
        ...options
    });
};

/**
 * creation of an internet user for a buyer profil / reseller
 */
export const postApiByStructureIdWebUserByBpLoginByBpPassword = <ThrowOnError extends boolean = false>(options: Options<PostApiByStructureIdWebUserByBpLoginByBpPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiByStructureIdWebUserByBpLoginByBpPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/{structureId}/WebUser/{bpLogin}/{bpPassword}',
        ...options
    });
};