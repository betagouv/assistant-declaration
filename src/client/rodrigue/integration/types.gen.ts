// This file is auto-generated by @hey-api/openapi-ts

/**
 * Basket of user
 */
export type Basket = {
    /**
     * unique id
     */
    id?: number;
    /**
     * internet user id
     */
    webUserId?: number;
    /**
     * date of creation
     */
    creationDate?: string;
    /**
     * list of events individual sells
     */
    eventsIndiv?: Array<Event> | null;
};

export type Category = {
    /**
     * unique id
     */
    id?: number;
    /**
     * name
     */
    name?: string | null;
    /**
     * count of the availables seats
     */
    seatsAvailablesCount?: number;
    /**
     * total seats count
     */
    seatsCount?: number;
    /**
     * list of prices of the category
     */
    prices?: Array<Price> | null;
    color?: Color;
};

export type Color = {
    readonly r?: number;
    readonly g?: number;
    readonly b?: number;
    readonly a?: number;
    readonly isKnownColor?: boolean;
    readonly isEmpty?: boolean;
    readonly isNamedColor?: boolean;
    readonly isSystemColor?: boolean;
    readonly name?: string | null;
};

export type ConfigurationSession = {
    id?: number;
    name?: string | null;
};

/**
 * structure to pass order properties
 */
export type CreateOrderDemand = {
    /**
     * amount paid in cents
     */
    amountPaid?: number;
    consumer?: CustomerOrderDemand | null;
    transactionReference?: string | null;
    barCodes?: Array<Ticket> | null;
};

export type CreateOrderDemandFull = {
    amountPaid?: number;
    consumer?: CustomerOrderDemand | null;
    transactionReference?: string | null;
    listDemands?: Array<SessionCategDemand> | null;
    /**
     * web customer
     */
    webUser?: WebUser | null;
};

/**
 * the reference currency
 */
export type Currency = {
    /**
     * numeric code, cf https://en.wikipedia.org/wiki/ISO_4217
     */
    codeNIso?: number;
    /**
     * name
     */
    name?: string | null;
};

export type CustomerOrderDemand = {
    reference?: string | null;
    customerLastName?: string | null;
    customerFirstName?: string | null;
    email?: string | null;
};

/**
 * Event
 */
export type Event = {
    /**
     * unique id
     */
    id?: number;
    /**
     * name
     */
    name?: string | null;
    /**
     * decription #1
     */
    eventDescription1?: string | null;
    /**
     * decription #2
     */
    eventDescription2?: string | null;
    /**
     * decription #3
     */
    eventDescription3?: string | null;
    /**
     * decription #4
     */
    eventDescription4?: string | null;
    /**
     * decription #5
     */
    eventDescription5?: string | null;
    /**
     * producer name
     */
    producerName?: string | null;
    /**
     * licence id #1
     */
    producerLicenceNum1?: string | null;
    /**
     * licence id #2
     */
    producerLicenceNum2?: string | null;
    summary?: string | null;
    distribution?: string | null;
    directed?: string | null;
    classification?: string | null;
    genre?: string | null;
    subGenre?: string | null;
    eventGroup?: EventGroup | null;
    duration?: number;
    durationInfo?: string | null;
    /**
     * List of sessions of this event
     */
    sessions?: Array<Session> | null;
};

export type EventGroup = {
    id?: number;
    name?: string | null;
    superGroup?: EventSuperGroup | null;
};

export type EventSuperGroup = {
    id?: number;
    name?: string | null;
};

/**
 * flag demand
 */
export type FlagDemand = {
    /**
     * internet user id
     */
    webUserId?: number;
    /**
     * list of demands
     */
    listDemands?: Array<SessionCategDemand> | null;
};

export type FlagResponse = {
    webUserId?: number;
    listDemands?: Array<SessionCategDemand> | null;
};

/**
 * zone / FLOOR / section / category / price
 */
export type Floor = {
    /**
     * unique id
     */
    id?: number;
    /**
     * name
     */
    name?: string | null;
    /**
     * list of sections in this floor
     */
    sections?: Array<Section> | null;
};

export type GenericFormExportModel = {
    structureId?: number;
    scriptName?: string | null;
    parameters?: Array<Parameter> | null;
};

export type Identity = {
    id?: number;
    surName?: string | null;
    firstName?: string | null;
    salutation?: Salutation | null;
    email?: string | null;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    address4?: string | null;
    zipCode?: string | null;
    city?: string | null;
    region?: string | null;
    country?: string | null;
    countryIsoAlpha2?: string | null;
    countryIsoAlpha3?: string | null;
    dateCreated?: string;
    dateUpdated?: string;
    subscriberNumber?: string | null;
    b64Password?: string | null;
    dateOfBirthday?: string;
};

export type IdentityUpdate = {
    id?: number;
    surName?: string | null;
    firstName?: string | null;
    salutation?: Salutation | null;
    email?: string | null;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    address4?: string | null;
    zipCode?: string | null;
    city?: string | null;
    region?: string | null;
    country?: string | null;
    countryIsoAlpha2?: string | null;
    countryIsoAlpha3?: string | null;
    dateCreated?: string;
    dateUpdated?: string;
    subscriberNumber?: string | null;
    b64Password?: string | null;
    dateOfBirthday?: string;
};

/**
 * order created
 */
export type Order = {
    /**
     * unique id
     */
    id?: number;
    /**
     * identity id
     */
    identityId?: number;
    purchaseDate?: string;
    events?: Array<Event> | null;
    readonly orderKey?: string | null;
};

export type Parameter = {
    name?: string | null;
    value?: string | null;
};

export type Place = {
    /**
     * unique id
     */
    id?: number;
    /**
     * place name
     */
    name?: string | null;
    /**
     * address 1
     */
    address1?: string | null;
    /**
     * address 2
     */
    address2?: string | null;
    /**
     * address 3
     */
    address3?: string | null;
    /**
     * address 4
     */
    address4?: string | null;
    /**
     * zip Code
     */
    zipCode?: string | null;
    /**
     * city
     */
    city?: string | null;
    /**
     * region
     */
    region?: string | null;
    /**
     * country
     */
    country?: string | null;
};

export type Price = {
    /**
     * unique id
     */
    id?: number;
    /**
     * name
     */
    name?: string | null;
    /**
     * amount ttc (in cents) of this price in this category
     */
    unitTTCAmount?: number;
    /**
     * amount of fees (in cents) of this price in this category
     */
    unitFeesAmount?: number;
    /**
     * sell rule for this price / categ : unique id
     */
    ruleId?: number;
    /**
     * sell rule for this price / categ : maximum seats i can flag
     */
    maxSeats?: number;
    /**
     * sell rule for this price / categ : minimum seats i can flag
     */
    minSeats?: number;
    /**
     * seats for this price / categ
     */
    seats?: Array<Seat> | null;
    /**
     * numbered or not (free placement)
     */
    placementNumbered?: boolean;
    /**
     * the user can choose his seat on the plan
     */
    placementManual?: boolean;
};

export type ProblemDetails = {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    [key: string]: unknown | (string | null) | (string | null) | (number | null) | (string | null) | (string | null) | undefined;
};

export type Producer = {
    producerId?: number;
    producerName?: string | null;
    licence?: string | null;
};

export type ReadOrderDemand = {
    orderKey?: string | null;
};

export type Salutation = {
    id?: number;
    name?: string | null;
};

/**
 * Seat exposed
 */
export type Seat = {
    /**
     * unique id (by event : seat id is unique in a event)
     */
    seatId?: number;
    /**
     * rank
     */
    rank?: string | null;
    /**
     * seat number
     */
    seatN?: string | null;
    /**
     * N, S, E, O, SO, SE, NO, NE
     */
    orientation?: string | null;
    /**
     * Seat type (Fauteuil d'orchestre, baquet, strapontin, etc)
     */
    denomination?: string | null;
    /**
     * F ou S (strapontin)
     */
    typeSeat?: string | null;
    /**
     * X in Rodrigue's seats grid
     */
    posX?: number;
    /**
     * Y in Rodrigue's seats grid
     */
    posY?: number;
    /**
     * reference of the seat on the seating plan
     */
    physicalSeatIndex?: number;
    /**
     * event id
     */
    eventId?: number;
    /**
     * session Id
     */
    sessionId?: number;
    /**
     * category id
     */
    categoryId?: number;
    /**
     * bar code (will be scanned)
     */
    barCode?: string | null;
    /**
     * ticket number
     */
    ticketNumber?: string | null;
    state?: string | null;
    zoneId?: number;
    floorId?: number;
    sectionId?: number;
    gate?: string | null;
    tribune?: string | null;
    access?: string | null;
    isMine?: boolean;
};

/**
 * zone / floor / SECTION / category / price
 */
export type Section = {
    /**
     * unique id
     */
    id?: number;
    /**
     * name
     */
    name?: string | null;
    /**
     * list of categories of the section
     */
    categories?: Array<Category> | null;
};

export type Session = {
    /**
     * unique id
     */
    id?: number;
    /**
     * start date of the session
     */
    startDate?: string;
    /**
     * end date of the session
     */
    endDate?: string;
    startDateSale?: string | null;
    endDateSale?: string | null;
    /**
     * event id of the session
     */
    eventId?: number;
    /**
     * venue of session
     */
    place?: Place | null;
    availablesSeatsCount?: number;
    totalSeatsCount?: number | null;
    projectionType?: string | null;
    version?: string | null;
    configurationSession?: ConfigurationSession | null;
    /**
     * list of zones
     */
    zones?: Array<Zone> | null;
    seats?: Array<Seat> | null;
};

export type SessionCategDemand = {
    sessionId?: number;
    zoneId?: number;
    floorId?: number;
    sectionId?: number;
    categoryId?: number;
    listRules?: Array<Rule> | null;
    spitGroupsCount?: number;
};

export type TextPlan = {
    posX?: number;
    posY?: number;
    decalX?: number;
    decalY?: number;
    type_Siege?: string | null;
    texte?: string | null;
    readonly color?: string | null;
    readonly width?: number;
};

/**
 * a ticket
 */
export type Ticket = {
    /**
     * ticket number
     */
    ticketNumber?: number;
    /**
     * bar code
     */
    barCode?: string | null;
    /**
     * event id
     */
    eventId?: number;
    /**
     * session id
     */
    sessionId?: number;
    seatId?: number;
    /**
     * date of session
     */
    sessionStartDate?: string;
    sessionEndDate?: string;
    /**
     * is already controlled ?
     */
    controlled?: boolean;
    /**
     * date control
     */
    controlledDate?: string;
    /**
     * price id
     */
    priceId?: number;
    /**
     * price name
     */
    priceName?: string | null;
    /**
     * category id
     */
    categoryId?: number;
    /**
     * category name
     */
    categoryName?: string | null;
    /**
     * email of the buyer
     */
    buyerEmail?: string | null;
    /**
     * last name of ticket's consumer
     */
    consumerLastName?: string | null;
    /**
     * first name of ticket's consumer
     */
    consumerFirstName?: string | null;
    rank?: string | null;
    seat?: string | null;
    denomination?: string | null;
    zoneName?: string | null;
    floorName?: string | null;
    sectionName?: string | null;
    tribuneName?: string | null;
    gateName?: string | null;
    accessName?: string | null;
    referenceExterne?: string | null;
    place?: Place | null;
    producer?: Producer | null;
};

/**
 * demande de liberation de place (unflag)
 */
export type UnFlagDemand = {
    /**
     * internet user
     */
    webUserId?: number;
    /**
     * sessions list
     */
    listSessions?: Array<SessionDemand> | null;
};

/**
 * web customer
 */
export type WebUser = {
    /**
     * unique id
     */
    id?: number;
    /**
     * address ip
     */
    addressIp?: string | null;
    /**
     * referer
     */
    referer?: string | null;
    /**
     * browser of the web customer
     */
    browser?: string | null;
    /**
     * identity id
     */
    identityId?: number;
};

/**
 * ZONE / floor / section / category / price
 */
export type Zone = {
    /**
     * unique id
     */
    id?: number;
    /**
     * name
     */
    name?: string | null;
    /**
     * list of floors in this zone
     */
    floors?: Array<Floor> | null;
};

/**
 * sell rule
 */
export type Rule = {
    /**
     * unique id
     */
    ruleId?: number;
    /**
     * seats count (to flag in a demand)
     */
    seatsCount?: number;
    /**
     * list flagged seats (in a response)
     */
    listSeats?: Array<Seat> | null;
    errorText?: string | null;
};

export type SessionDemand = {
    sessionId?: number;
    /**
     * seats list to unflag
     */
    listSeats?: Array<Seat> | null;
};

export type GetApiByStructureIdTicketByBarCodeByEventIdData = {
    body?: never;
    path: {
        /**
         * structure Id
         */
        structureId: number;
        /**
         * bar code
         */
        barCode: string;
        /**
         * event id
         */
        eventId: number;
    };
    query?: never;
    url: '/api/{structureId}/ticket/{barCode}/{eventId}';
};

export type GetApiByStructureIdTicketByBarCodeByEventIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: ProblemDetails;
    /**
     * Not Acceptable
     */
    406: ProblemDetails;
};

export type GetApiByStructureIdTicketByBarCodeByEventIdError = GetApiByStructureIdTicketByBarCodeByEventIdErrors[keyof GetApiByStructureIdTicketByBarCodeByEventIdErrors];

export type GetApiByStructureIdTicketByBarCodeByEventIdResponses = {
    /**
     * OK
     */
    200: Ticket;
};

export type GetApiByStructureIdTicketByBarCodeByEventIdResponse = GetApiByStructureIdTicketByBarCodeByEventIdResponses[keyof GetApiByStructureIdTicketByBarCodeByEventIdResponses];

export type PutApiByStructureIdTicketByBarCodeByEventIdData = {
    /**
     * a ticket
     */
    body?: Ticket;
    path: {
        /**
         * structure Id
         */
        structureId: number;
        /**
         * bar code
         */
        barCode: string;
        /**
         * event id
         */
        eventId: number;
    };
    query?: never;
    url: '/api/{structureId}/ticket/{barCode}/{eventId}';
};

export type PutApiByStructureIdTicketByBarCodeByEventIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: ProblemDetails;
    /**
     * Not Acceptable
     */
    406: ProblemDetails;
};

export type PutApiByStructureIdTicketByBarCodeByEventIdError = PutApiByStructureIdTicketByBarCodeByEventIdErrors[keyof PutApiByStructureIdTicketByBarCodeByEventIdErrors];

export type PutApiByStructureIdTicketByBarCodeByEventIdResponses = {
    /**
     * OK
     */
    200: Ticket;
};

export type PutApiByStructureIdTicketByBarCodeByEventIdResponse = PutApiByStructureIdTicketByBarCodeByEventIdResponses[keyof PutApiByStructureIdTicketByBarCodeByEventIdResponses];

export type GetApiByStructureIdBasketByLangCodeByBasketIdData = {
    body?: never;
    path: {
        structureId: number;
        langCode: string;
        basketId: number;
    };
    query?: never;
    url: '/api/{structureId}/Basket/{langCode}/{basketId}';
};

export type GetApiByStructureIdBasketByLangCodeByBasketIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdBasketByLangCodeByBasketIdResponses = {
    /**
     * OK
     */
    200: Basket;
};

export type GetApiByStructureIdBasketByLangCodeByBasketIdResponse = GetApiByStructureIdBasketByLangCodeByBasketIdResponses[keyof GetApiByStructureIdBasketByLangCodeByBasketIdResponses];

export type PostApiByStructureIdAddBasketByLangCodeByBpLoginByBpPasswordData = {
    /**
     * flag demand
     */
    body?: FlagDemand;
    path: {
        structureId: number;
        langCode: string;
        bpLogin: string;
        bpPassword: string;
    };
    query?: {
        buyerProfilId?: number;
    };
    url: '/api/{structureId}/AddBasket/{langCode}/{bpLogin}/{bpPassword}';
};

export type PostApiByStructureIdAddBasketByLangCodeByBpLoginByBpPasswordErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostApiByStructureIdAddBasketByLangCodeByBpLoginByBpPasswordResponses = {
    /**
     * OK
     */
    200: Basket;
};

export type PostApiByStructureIdAddBasketByLangCodeByBpLoginByBpPasswordResponse = PostApiByStructureIdAddBasketByLangCodeByBpLoginByBpPasswordResponses[keyof PostApiByStructureIdAddBasketByLangCodeByBpLoginByBpPasswordResponses];

export type PostApiByStructureIdSeatsFlagAutoData = {
    /**
     * flag demand
     */
    body?: FlagDemand;
    path: {
        structureId: number;
    };
    query?: never;
    url: '/api/{structureId}/SeatsFlag/auto';
};

export type PostApiByStructureIdSeatsFlagAutoErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostApiByStructureIdSeatsFlagAutoError = PostApiByStructureIdSeatsFlagAutoErrors[keyof PostApiByStructureIdSeatsFlagAutoErrors];

export type PostApiByStructureIdSeatsFlagAutoResponses = {
    /**
     * OK
     */
    200: FlagResponse;
};

export type PostApiByStructureIdSeatsFlagAutoResponse = PostApiByStructureIdSeatsFlagAutoResponses[keyof PostApiByStructureIdSeatsFlagAutoResponses];

export type DeleteApiByStructureIdSeatsFlagData = {
    /**
     * demande de liberation de place (unflag)
     */
    body?: UnFlagDemand;
    path: {
        structureId: number;
    };
    query?: never;
    url: '/api/{structureId}/SeatsFlag';
};

export type DeleteApiByStructureIdSeatsFlagErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeleteApiByStructureIdSeatsFlagError = DeleteApiByStructureIdSeatsFlagErrors[keyof DeleteApiByStructureIdSeatsFlagErrors];

export type DeleteApiByStructureIdSeatsFlagResponses = {
    /**
     * OK
     */
    200: boolean;
};

export type DeleteApiByStructureIdSeatsFlagResponse = DeleteApiByStructureIdSeatsFlagResponses[keyof DeleteApiByStructureIdSeatsFlagResponses];

export type PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdData = {
    body?: Array<number>;
    path: {
        structureId: number;
        eventId: number;
        sessionId: number;
        webUserId: number;
    };
    query?: never;
    url: '/api/{structureId}/SeatsFlag/plan/{eventId}/{sessionId}/{webUserId}';
};

export type PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdError = PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdErrors[keyof PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdErrors];

export type PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdResponses = {
    /**
     * OK
     */
    200: Array<Seat>;
};

export type PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdResponse = PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdResponses[keyof PostApiByStructureIdSeatsFlagPlanByEventIdBySessionIdByWebUserIdResponses];

export type GetApiByStructureIdScheduleByLangCodeByBpLoginByBpPasswordData = {
    body?: never;
    path: {
        /**
         * id structure
         */
        structureId: number;
        /**
         * language iso 2c
         */
        langCode: string;
        /**
         * login
         */
        bpLogin: string;
        /**
         * password
         */
        bpPassword: string;
    };
    query?: never;
    url: '/api/{structureId}/Schedule/{langCode}/{bpLogin}/{bpPassword}';
};

export type GetApiByStructureIdScheduleByLangCodeByBpLoginByBpPasswordErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdScheduleByLangCodeByBpLoginByBpPasswordResponses = {
    /**
     * OK
     */
    200: Array<Event>;
};

export type GetApiByStructureIdScheduleByLangCodeByBpLoginByBpPasswordResponse = GetApiByStructureIdScheduleByLangCodeByBpLoginByBpPasswordResponses[keyof GetApiByStructureIdScheduleByLangCodeByBpLoginByBpPasswordResponses];

export type GetApiByStructureIdScheduleByLangCodeByIdentiteIdData = {
    body?: never;
    path: {
        /**
         * id structure
         */
        structureId: number;
        /**
         * language iso 2c
         */
        langCode: string;
        /**
         * identiteId (opt)
         */
        identiteId: number;
    };
    query?: never;
    url: '/api/{structureId}/Schedule/{langCode}/{identiteId}';
};

export type GetApiByStructureIdScheduleByLangCodeByIdentiteIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdScheduleByLangCodeByIdentiteIdResponses = {
    /**
     * OK
     */
    200: Array<Event>;
};

export type GetApiByStructureIdScheduleByLangCodeByIdentiteIdResponse = GetApiByStructureIdScheduleByLangCodeByIdentiteIdResponses[keyof GetApiByStructureIdScheduleByLangCodeByIdentiteIdResponses];

export type GetApiByStructureIdScheduleByLangCodeData = {
    body?: never;
    path: {
        /**
         * id structure
         */
        structureId: number;
        /**
         * language iso 2c
         */
        langCode: string;
    };
    query?: never;
    url: '/api/{structureId}/Schedule/{langCode}';
};

export type GetApiByStructureIdScheduleByLangCodeResponses = {
    /**
     * OK
     */
    200: Array<Event>;
};

export type GetApiByStructureIdScheduleByLangCodeResponse = GetApiByStructureIdScheduleByLangCodeResponses[keyof GetApiByStructureIdScheduleByLangCodeResponses];

export type GetApiByStructureIdScheduleByLangCodeDispoData = {
    body?: never;
    path: {
        /**
         * id structure
         */
        structureId: number;
        /**
         * language iso 2c
         */
        langCode: string;
    };
    query?: never;
    url: '/api/{structureId}/Schedule/{langCode}/dispo';
};

export type GetApiByStructureIdScheduleByLangCodeDispoResponses = {
    /**
     * OK
     */
    200: Array<Event>;
};

export type GetApiByStructureIdScheduleByLangCodeDispoResponse = GetApiByStructureIdScheduleByLangCodeDispoResponses[keyof GetApiByStructureIdScheduleByLangCodeDispoResponses];

export type GetApiByStructureIdEventsSessionsByLangCodeData = {
    body?: never;
    path: {
        structureId: number;
        langCode: string;
    };
    query?: {
        startDate?: string;
        endDate?: string;
    };
    url: '/api/{structureId}/Events/Sessions/{langCode}';
};

export type GetApiByStructureIdEventsSessionsByLangCodeErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdEventsSessionsByLangCodeResponses = {
    /**
     * OK
     */
    200: Array<Event>;
};

export type GetApiByStructureIdEventsSessionsByLangCodeResponse = GetApiByStructureIdEventsSessionsByLangCodeResponses[keyof GetApiByStructureIdEventsSessionsByLangCodeResponses];

export type GetApiByStructureIdEventsByEventIdImagesData = {
    body?: never;
    path: {
        /**
         * id structure
         */
        structureId: number;
        /**
         * id structure
         */
        eventId: number;
    };
    query?: never;
    url: '/api/{structureId}/Events/{eventId}/images';
};

export type GetApiByStructureIdEventsByEventIdImagesResponses = {
    /**
     * OK
     */
    200: Array<Event>;
};

export type GetApiByStructureIdEventsByEventIdImagesResponse = GetApiByStructureIdEventsByEventIdImagesResponses[keyof GetApiByStructureIdEventsByEventIdImagesResponses];

export type GetApiByStructureIdEventsImagesData = {
    body?: never;
    path: {
        /**
         * id structure
         */
        structureId: number;
    };
    query?: never;
    url: '/api/{structureId}/Events/images';
};

export type GetApiByStructureIdEventsImagesResponses = {
    /**
     * OK
     */
    200: Array<Event>;
};

export type GetApiByStructureIdEventsImagesResponse = GetApiByStructureIdEventsImagesResponses[keyof GetApiByStructureIdEventsImagesResponses];

export type GetApiExportGetExportByScriptNameData = {
    body?: GenericFormExportModel;
    path?: never;
    query?: never;
    url: '/api/Export/GetExportByScriptName';
};

export type GetApiExportGetExportByScriptNameErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiExportGetExportByScriptNameResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetApiExportGetExportByScriptNameResponse = GetApiExportGetExportByScriptNameResponses[keyof GetApiExportGetExportByScriptNameResponses];

export type PostApiExportGetExportByScriptNameData = {
    body?: GenericFormExportModel;
    path?: never;
    query?: never;
    url: '/api/Export/GetExportByScriptName';
};

export type PostApiExportGetExportByScriptNameErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostApiExportGetExportByScriptNameResponses = {
    /**
     * OK
     */
    200: string;
};

export type PostApiExportGetExportByScriptNameResponse = PostApiExportGetExportByScriptNameResponses[keyof PostApiExportGetExportByScriptNameResponses];

export type GetApiByStructureIdIdentityData = {
    body?: never;
    path: {
        /**
         * structure Id
         */
        structureId: number;
    };
    query?: {
        id?: number;
        /**
         * email
         */
        email?: string;
        /**
         * encrypted passw
         */
        b64password?: string;
    };
    url: '/api/{structureId}/identity';
};

export type GetApiByStructureIdIdentityErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: ProblemDetails;
    /**
     * Not Acceptable
     */
    406: ProblemDetails;
};

export type GetApiByStructureIdIdentityError = GetApiByStructureIdIdentityErrors[keyof GetApiByStructureIdIdentityErrors];

export type GetApiByStructureIdIdentityResponses = {
    /**
     * OK
     */
    200: Identity;
};

export type GetApiByStructureIdIdentityResponse = GetApiByStructureIdIdentityResponses[keyof GetApiByStructureIdIdentityResponses];

export type PatchApiByStructureIdIdentityData = {
    body?: IdentityUpdate;
    path: {
        /**
         * structure Id
         */
        structureId: number;
    };
    query?: {
        /**
         * email
         */
        email?: string;
        id?: number;
    };
    url: '/api/{structureId}/identity';
};

export type PatchApiByStructureIdIdentityErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: ProblemDetails;
    /**
     * Not Acceptable
     */
    406: ProblemDetails;
};

export type PatchApiByStructureIdIdentityError = PatchApiByStructureIdIdentityErrors[keyof PatchApiByStructureIdIdentityErrors];

export type PatchApiByStructureIdIdentityResponses = {
    /**
     * OK
     */
    200: Identity;
};

export type PatchApiByStructureIdIdentityResponse = PatchApiByStructureIdIdentityResponses[keyof PatchApiByStructureIdIdentityResponses];

export type PostApiByStructureIdIdentityData = {
    body?: Identity;
    path: {
        structureId: number;
    };
    query?: never;
    url: '/api/{structureId}/identity';
};

export type PostApiByStructureIdIdentityErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not Found
     */
    404: ProblemDetails;
    /**
     * Not Acceptable
     */
    406: ProblemDetails;
    /**
     * Conflict
     */
    409: ProblemDetails;
};

export type PostApiByStructureIdIdentityError = PostApiByStructureIdIdentityErrors[keyof PostApiByStructureIdIdentityErrors];

export type PostApiByStructureIdIdentityResponses = {
    /**
     * Created
     */
    201: Identity;
};

export type PostApiByStructureIdIdentityResponse = PostApiByStructureIdIdentityResponses[keyof PostApiByStructureIdIdentityResponses];

export type GetApiByStructureIdIdentitySalutationsData = {
    body?: never;
    path: {
        /**
         * structure Id
         */
        structureId: number;
    };
    query?: never;
    url: '/api/{structureId}/identity/salutations';
};

export type GetApiByStructureIdIdentitySalutationsErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Not Found
     */
    404: ProblemDetails;
    /**
     * Not Acceptable
     */
    406: ProblemDetails;
};

export type GetApiByStructureIdIdentitySalutationsError = GetApiByStructureIdIdentitySalutationsErrors[keyof GetApiByStructureIdIdentitySalutationsErrors];

export type GetApiByStructureIdIdentitySalutationsResponses = {
    /**
     * OK
     */
    200: Array<Salutation>;
};

export type GetApiByStructureIdIdentitySalutationsResponse = GetApiByStructureIdIdentitySalutationsResponses[keyof GetApiByStructureIdIdentitySalutationsResponses];

export type GetApiByStructureIdIdentitySalutationsByLangIsoData = {
    body?: never;
    path: {
        /**
         * structure Id
         */
        structureId: number;
        /**
         * fr / en / de / etc
         */
        langIso: string;
    };
    query?: never;
    url: '/api/{structureId}/identity/salutations/{langIso}';
};

export type GetApiByStructureIdIdentitySalutationsByLangIsoErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Not Found
     */
    404: ProblemDetails;
    /**
     * Not Acceptable
     */
    406: ProblemDetails;
};

export type GetApiByStructureIdIdentitySalutationsByLangIsoError = GetApiByStructureIdIdentitySalutationsByLangIsoErrors[keyof GetApiByStructureIdIdentitySalutationsByLangIsoErrors];

export type GetApiByStructureIdIdentitySalutationsByLangIsoResponses = {
    /**
     * OK
     */
    200: Array<Salutation>;
};

export type GetApiByStructureIdIdentitySalutationsByLangIsoResponse = GetApiByStructureIdIdentitySalutationsByLangIsoResponses[keyof GetApiByStructureIdIdentitySalutationsByLangIsoResponses];

export type GetApiIdentityEncryptByPasswordData = {
    body?: never;
    path: {
        /**
         * string to encrypt
         */
        password: string;
    };
    query?: never;
    url: '/api/identity/encrypt/{password}';
};

export type GetApiIdentityEncryptByPasswordErrors = {
    /**
     * Not Found
     */
    404: ProblemDetails;
    /**
     * Not Acceptable
     */
    406: ProblemDetails;
};

export type GetApiIdentityEncryptByPasswordError = GetApiIdentityEncryptByPasswordErrors[keyof GetApiIdentityEncryptByPasswordErrors];

export type GetApiIdentityEncryptByPasswordResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetApiIdentityEncryptByPasswordResponse = GetApiIdentityEncryptByPasswordResponses[keyof GetApiIdentityEncryptByPasswordResponses];

export type GetApiByStructureIdOrderByOrderIdByBasketIdData = {
    body?: never;
    path: {
        /**
         * structure id
         */
        structureId: number;
        /**
         * pass an order id
         */
        orderId: number;
        /**
         * or basket id
         */
        basketId: number;
    };
    query?: never;
    url: '/api/{structureId}/Order/{orderId}/{basketId}';
};

export type GetApiByStructureIdOrderByOrderIdByBasketIdErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdOrderByOrderIdByBasketIdError = GetApiByStructureIdOrderByOrderIdByBasketIdErrors[keyof GetApiByStructureIdOrderByOrderIdByBasketIdErrors];

export type GetApiByStructureIdOrderByOrderIdByBasketIdResponses = {
    /**
     * OK
     */
    200: Order;
};

export type GetApiByStructureIdOrderByOrderIdByBasketIdResponse = GetApiByStructureIdOrderByOrderIdByBasketIdResponses[keyof GetApiByStructureIdOrderByOrderIdByBasketIdResponses];

export type GetApiByStructureIdOrdersByBpLoginByBpPasswordData = {
    body?: never;
    path: {
        /**
         * structure id
         */
        structureId: number;
        bpLogin: string;
        bpPassword: string;
    };
    query?: never;
    url: '/api/{structureId}/Orders/{bpLogin}/{bpPassword}';
};

export type GetApiByStructureIdOrdersByBpLoginByBpPasswordErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
};

export type GetApiByStructureIdOrdersByBpLoginByBpPasswordError = GetApiByStructureIdOrdersByBpLoginByBpPasswordErrors[keyof GetApiByStructureIdOrdersByBpLoginByBpPasswordErrors];

export type GetApiByStructureIdOrdersByBpLoginByBpPasswordResponses = {
    /**
     * OK
     */
    200: Order;
};

export type GetApiByStructureIdOrdersByBpLoginByBpPasswordResponse = GetApiByStructureIdOrdersByBpLoginByBpPasswordResponses[keyof GetApiByStructureIdOrdersByBpLoginByBpPasswordResponses];

export type DeleteApiByStructureIdOrderByOrderIdData = {
    body?: ReadOrderDemand;
    path: {
        structureId: number;
        orderId: number;
    };
    query?: never;
    url: '/api/{structureId}/Order/{orderId}';
};

export type DeleteApiByStructureIdOrderByOrderIdErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type DeleteApiByStructureIdOrderByOrderIdError = DeleteApiByStructureIdOrderByOrderIdErrors[keyof DeleteApiByStructureIdOrderByOrderIdErrors];

export type DeleteApiByStructureIdOrderByOrderIdResponses = {
    /**
     * OK
     */
    200: Order;
};

export type DeleteApiByStructureIdOrderByOrderIdResponse = DeleteApiByStructureIdOrderByOrderIdResponses[keyof DeleteApiByStructureIdOrderByOrderIdResponses];

export type GetApiByStructureIdOrderByOrderIdData = {
    body?: never;
    path: {
        /**
         * structure id
         */
        structureId: number;
        /**
         * pass an order id
         */
        orderId: number;
    };
    query?: never;
    url: '/api/{structureId}/Order/{orderId}';
};

export type GetApiByStructureIdOrderByOrderIdErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
};

export type GetApiByStructureIdOrderByOrderIdError = GetApiByStructureIdOrderByOrderIdErrors[keyof GetApiByStructureIdOrderByOrderIdErrors];

export type GetApiByStructureIdOrderByOrderIdResponses = {
    /**
     * OK
     */
    200: Order;
};

export type GetApiByStructureIdOrderByOrderIdResponse = GetApiByStructureIdOrderByOrderIdResponses[keyof GetApiByStructureIdOrderByOrderIdResponses];

export type PostApiByStructureIdOrderByBpLoginByBpPasswordData = {
    body?: CreateOrderDemandFull;
    path: {
        structureId: number;
        bpLogin: string;
        bpPassword: string;
    };
    query?: {
        /**
         * montant payé, en cents
         */
        amount?: number;
    };
    url: '/api/{structureId}/Order/{bpLogin}/{bpPassword}';
};

export type PostApiByStructureIdOrderByBpLoginByBpPasswordErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostApiByStructureIdOrderByBpLoginByBpPasswordError = PostApiByStructureIdOrderByBpLoginByBpPasswordErrors[keyof PostApiByStructureIdOrderByBpLoginByBpPasswordErrors];

export type PostApiByStructureIdOrderByBpLoginByBpPasswordResponses = {
    /**
     * OK
     */
    200: Order;
};

export type PostApiByStructureIdOrderByBpLoginByBpPasswordResponse = PostApiByStructureIdOrderByBpLoginByBpPasswordResponses[keyof PostApiByStructureIdOrderByBpLoginByBpPasswordResponses];

export type PostApiByStructureIdOrderByBasketIdData = {
    /**
     * structure to pass order properties
     */
    body?: CreateOrderDemand;
    path: {
        structureId: number;
        /**
         * basket id
         */
        basketId: number;
    };
    query?: {
        /**
         * amount paid, in cents
         */
        amount?: number;
    };
    url: '/api/{structureId}/Order/{basketId}';
};

export type PostApiByStructureIdOrderByBasketIdErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostApiByStructureIdOrderByBasketIdError = PostApiByStructureIdOrderByBasketIdErrors[keyof PostApiByStructureIdOrderByBasketIdErrors];

export type PostApiByStructureIdOrderByBasketIdResponses = {
    /**
     * OK
     */
    200: Order;
};

export type PostApiByStructureIdOrderByBasketIdResponse = PostApiByStructureIdOrderByBasketIdResponses[keyof PostApiByStructureIdOrderByBasketIdResponses];

export type GetApiByStructureIdPlanBySessionIdData = {
    body?: never;
    path: {
        structureId: number;
        sessionId: number;
    };
    query?: never;
    url: '/api/{structureId}/Plan/{sessionId}';
};

export type GetApiByStructureIdPlanBySessionIdResponses = {
    /**
     * OK
     */
    200: Array<Seat>;
};

export type GetApiByStructureIdPlanBySessionIdResponse = GetApiByStructureIdPlanBySessionIdResponses[keyof GetApiByStructureIdPlanBySessionIdResponses];

export type GetApiByStructureIdPlanBySessionIdAvailablesByIdentityIdByWebUserIdByBpLoginByBpPasswordData = {
    body?: never;
    path: {
        structureId: number;
        sessionId: number;
        identityId: number;
        webUserId: number;
        bpLogin: string;
        bpPassword: string;
    };
    query?: never;
    url: '/api/{structureId}/Plan/{sessionId}/availables/{identityId}/{webUserId}/{bpLogin}/{bpPassword}';
};

export type GetApiByStructureIdPlanBySessionIdAvailablesByIdentityIdByWebUserIdByBpLoginByBpPasswordErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdPlanBySessionIdAvailablesByIdentityIdByWebUserIdByBpLoginByBpPasswordResponses = {
    /**
     * OK
     */
    200: Array<Seat>;
};

export type GetApiByStructureIdPlanBySessionIdAvailablesByIdentityIdByWebUserIdByBpLoginByBpPasswordResponse = GetApiByStructureIdPlanBySessionIdAvailablesByIdentityIdByWebUserIdByBpLoginByBpPasswordResponses[keyof GetApiByStructureIdPlanBySessionIdAvailablesByIdentityIdByWebUserIdByBpLoginByBpPasswordResponses];

export type GetApiByStructureIdPlanBySessionIdTextsData = {
    body?: never;
    path: {
        structureId: number;
        sessionId: number;
    };
    query?: never;
    url: '/api/{structureId}/Plan/{sessionId}/texts';
};

export type GetApiByStructureIdPlanBySessionIdTextsResponses = {
    /**
     * OK
     */
    200: Array<TextPlan>;
};

export type GetApiByStructureIdPlanBySessionIdTextsResponse = GetApiByStructureIdPlanBySessionIdTextsResponses[keyof GetApiByStructureIdPlanBySessionIdTextsResponses];

export type GetApiByStructureIdPlanBySessionIdByLangCodeCategoriesData = {
    body?: never;
    path: {
        structureId: number;
        sessionId: number;
        langCode: string;
    };
    query?: never;
    url: '/api/{structureId}/Plan/{sessionId}/{langCode}/categories';
};

export type GetApiByStructureIdPlanBySessionIdByLangCodeCategoriesResponses = {
    /**
     * OK
     */
    200: Array<Category>;
};

export type GetApiByStructureIdPlanBySessionIdByLangCodeCategoriesResponse = GetApiByStructureIdPlanBySessionIdByLangCodeCategoriesResponses[keyof GetApiByStructureIdPlanBySessionIdByLangCodeCategoriesResponses];

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBuyerProfilIdData = {
    body?: never;
    path: {
        structureId: number;
        /**
         * fr/en/etc
         */
        langCode: string;
        /**
         * the event id
         */
        eventId: number;
        identityId: number;
        webUserId: number;
        buyerProfilId: number;
    };
    query?: never;
    url: '/api/{structureId}/Sessions/{eventId}/{langCode}/{identityId}/{webUserId}/{buyerProfilId}';
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBuyerProfilIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBuyerProfilIdResponses = {
    /**
     * OK
     */
    200: Event;
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBuyerProfilIdResponse = GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBuyerProfilIdResponses[keyof GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBuyerProfilIdResponses];

export type GetApiByStructureIdSessionsByEventIdByLangCodeData = {
    body?: never;
    path: {
        structureId: number;
        /**
         * fr/en/etc
         */
        langCode: string;
        /**
         * the event id
         */
        eventId: number;
    };
    query?: never;
    url: '/api/{structureId}/Sessions/{eventId}/{langCode}';
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeResponses = {
    /**
     * OK
     */
    200: Event;
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeResponse = GetApiByStructureIdSessionsByEventIdByLangCodeResponses[keyof GetApiByStructureIdSessionsByEventIdByLangCodeResponses];

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdData = {
    body?: never;
    path: {
        structureId: number;
        /**
         * fr/en/etc
         */
        langCode: string;
        /**
         * the event id
         */
        eventId: number;
        identityId: number;
    };
    query?: never;
    url: '/api/{structureId}/Sessions/{eventId}/{langCode}/{identityId}';
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdResponses = {
    /**
     * OK
     */
    200: Event;
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdResponse = GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdResponses[keyof GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdResponses];

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordData = {
    body?: never;
    path: {
        structureId: number;
        /**
         * fr/en/etc
         */
        langCode: string;
        /**
         * the event id
         */
        eventId: number;
        identityId: number;
        webUserId: number;
        /**
         * buyer profil / reseller login
         */
        bpLogin: string;
        /**
         * buyer profil /reseller password
         */
        bpPassword: string;
    };
    query?: never;
    url: '/api/{structureId}/Sessions/{eventId}/{langCode}/{identityId}/{webUserId}/{bpLogin}/{bpPassword}';
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponses = {
    /**
     * OK
     */
    200: Event;
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponse = GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponses[keyof GetApiByStructureIdSessionsByEventIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponses];

export type GetApiByStructureIdSessionsByEventIdBySessionIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordData = {
    body?: never;
    path: {
        structureId: number;
        langCode: string;
        eventId: number;
        sessionId: number;
        identityId: number;
        webUserId: number;
        bpLogin: string;
        bpPassword: string;
    };
    query?: never;
    url: '/api/{structureId}/Sessions/{eventId}/{sessionId}/{langCode}/{identityId}/{webUserId}/{bpLogin}/{bpPassword}';
};

export type GetApiByStructureIdSessionsByEventIdBySessionIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdSessionsByEventIdBySessionIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponses = {
    /**
     * OK
     */
    200: Event;
};

export type GetApiByStructureIdSessionsByEventIdBySessionIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponse = GetApiByStructureIdSessionsByEventIdBySessionIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponses[keyof GetApiByStructureIdSessionsByEventIdBySessionIdByLangCodeByIdentityIdByWebUserIdByBpLoginByBpPasswordResponses];

export type GetApiByStructureIdSessionsByEventIdByLangCodeByBpLoginByBpPasswordData = {
    body?: never;
    path: {
        structureId: number;
        /**
         * fr/en/etc
         */
        langCode: string;
        /**
         * the event id
         */
        eventId: number;
        /**
         * buyer profil / reseller login
         */
        bpLogin: string;
        /**
         * buyer profil /reseller password
         */
        bpPassword: string;
    };
    query?: never;
    url: '/api/{structureId}/Sessions/{eventId}/{langCode}/{bpLogin}/{bpPassword}';
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByBpLoginByBpPasswordErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByBpLoginByBpPasswordResponses = {
    /**
     * OK
     */
    200: Event;
};

export type GetApiByStructureIdSessionsByEventIdByLangCodeByBpLoginByBpPasswordResponse = GetApiByStructureIdSessionsByEventIdByLangCodeByBpLoginByBpPasswordResponses[keyof GetApiByStructureIdSessionsByEventIdByLangCodeByBpLoginByBpPasswordResponses];

export type GetApiByStructureIdCurrencyData = {
    body?: never;
    path: {
        /**
         * structure id
         */
        structureId: number;
    };
    query?: never;
    url: '/api/{structureId}/Currency';
};

export type GetApiByStructureIdCurrencyResponses = {
    /**
     * OK
     */
    200: Currency;
};

export type GetApiByStructureIdCurrencyResponse = GetApiByStructureIdCurrencyResponses[keyof GetApiByStructureIdCurrencyResponses];

export type PostApiByStructureIdWebUserData = {
    body?: never;
    path: {
        structureId: number;
    };
    query?: {
        /**
         * unique id
         */
        Id?: number;
        /**
         * address ip
         */
        AddressIp?: string;
        /**
         * referer
         */
        Referer?: string;
        /**
         * browser of the web customer
         */
        Browser?: string;
        /**
         * identity id
         */
        IdentityId?: number;
    };
    url: '/api/{structureId}/WebUser';
};

export type PostApiByStructureIdWebUserErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostApiByStructureIdWebUserResponses = {
    /**
     * OK
     */
    200: WebUser;
};

export type PostApiByStructureIdWebUserResponse = PostApiByStructureIdWebUserResponses[keyof PostApiByStructureIdWebUserResponses];

export type PostApiByStructureIdWebUserByBuyerProfilIdData = {
    body?: never;
    path: {
        structureId: number;
        /**
         * buyer profil / reseller id
         */
        buyerProfilId: number;
    };
    query?: {
        /**
         * unique id
         */
        Id?: number;
        /**
         * address ip
         */
        AddressIp?: string;
        /**
         * referer
         */
        Referer?: string;
        /**
         * browser of the web customer
         */
        Browser?: string;
        /**
         * identity id
         */
        IdentityId?: number;
    };
    url: '/api/{structureId}/WebUser/{buyerProfilId}';
};

export type PostApiByStructureIdWebUserByBuyerProfilIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostApiByStructureIdWebUserByBuyerProfilIdResponses = {
    /**
     * OK
     */
    200: WebUser;
};

export type PostApiByStructureIdWebUserByBuyerProfilIdResponse = PostApiByStructureIdWebUserByBuyerProfilIdResponses[keyof PostApiByStructureIdWebUserByBuyerProfilIdResponses];

export type PostApiByStructureIdWebUserByBpLoginByBpPasswordData = {
    body?: never;
    path: {
        structureId: number;
        /**
         * buyer profil / reseller login
         */
        bpLogin: string;
        /**
         * buyer profil /reseller password
         */
        bpPassword: string;
    };
    query?: {
        /**
         * unique id
         */
        Id?: number;
        /**
         * address ip
         */
        AddressIp?: string;
        /**
         * referer
         */
        Referer?: string;
        /**
         * browser of the web customer
         */
        Browser?: string;
        /**
         * identity id
         */
        IdentityId?: number;
    };
    url: '/api/{structureId}/WebUser/{bpLogin}/{bpPassword}';
};

export type PostApiByStructureIdWebUserByBpLoginByBpPasswordErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
};

export type PostApiByStructureIdWebUserByBpLoginByBpPasswordResponses = {
    /**
     * OK
     */
    200: WebUser;
};

export type PostApiByStructureIdWebUserByBpLoginByBpPasswordResponse = PostApiByStructureIdWebUserByBpLoginByBpPasswordResponses[keyof PostApiByStructureIdWebUserByBpLoginByBpPasswordResponses];